<Project>
  <Name>Engine</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.Common</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>DebugHelper</Name>
        <Access>Public</Access>
        <Location left="75" top="42" />
        <Size width="401" height="231" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public static int SevertiyFilter</Member>
        <Member type="Field">public static bool ThrowAllExceptions</Member>
        <Member type="Method">public static void ApplySettings(IDebugSettings settings)</Member>
        <Member type="Method">private static LogStream OpenFileStream(ILogStreamSettings settings)</Member>
        <Member type="Method">private static LogStream OpenConsoleStream(ILogStreamSettings settings)</Member>
        <Member type="Method">private static LogStream OpenNetworkStream(ILogStreamSettings settings)</Member>
        <Member type="Method">private static LogStream OpenStream(ILogStreamSettings settings)</Member>
        <Member type="Method">public static void Crash(Exception ex, bool recoverable)</Member>
        <Member type="Method">public static void Log(string message, int channel, int severity = 0)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>ILogStreamSettings</Name>
        <Access>Public</Access>
        <Location left="40" top="626" />
        <Size width="419" height="226" />
        <Collapsed>False</Collapsed>
        <Member type="Method">void NewMethod()</Member>
        <Member type="Property">int StreamType { get; set; }</Member>
        <Member type="Property">string Destination { get; set; }</Member>
        <Member type="Property">int Mask { get; set; }</Member>
        <Member type="Property">int MatchMode { get; set; }</Member>
        <Member type="Property">bool TimeStamp { get; set; }</Member>
        <Member type="Property">int NetworkPort { get; set; }</Member>
        <Member type="Property">int NetworkAppID { get; set; }</Member>
        <Member type="Property">Version NetworkAuthVersion { get; set; }</Member>
      </Entity>
      <Entity type="Interface">
        <Name>IDebugSettings</Name>
        <Access>Public</Access>
        <Location left="53" top="296" />
        <Size width="404" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">bool Enabled { get; set; }</Member>
        <Member type="Property">bool SendInterrnalWarnings { get; set; }</Member>
        <Member type="Property">bool SearchForUpdates { get; set; }</Member>
        <Member type="Property">int InternalUpdateMask { get; set; }</Member>
        <Member type="Property">int PrefixLookupFlags { get; set; }</Member>
        <Member type="Property">int SeverityFilter { get; set; }</Member>
        <Member type="Property">string[] StageNames { get; set; }</Member>
        <Member type="Property">ILogStreamSettings[] Streams { get; set; }</Member>
      </Entity>
      <Entity type="Class">
        <Name>APreProcessorConfig</Name>
        <Access>Public</Access>
        <Location left="828" top="42" />
        <Size width="516" height="199" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public abstract Verbosity VerbosityLevel { get; }</Member>
        <Member type="Property">public abstract List&lt;AbstractPlugin&gt; Plugins { get; }</Member>
        <Member type="Method">public abstract string GetGenericInclude(string filename, string[] gentype)</Member>
        <Member type="Method">public string[] Preprocess(IFileContent filename, Dictionary&lt;string, bool&gt; defs)</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>DefaultPreProcessorConfig</Name>
        <Access>Public</Access>
        <Location left="1179" top="339" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public override Verbosity VerbosityLevel { get; }</Member>
        <Member type="Property">public override List&lt;AbstractPlugin&gt; Plugins { get; }</Member>
        <Member type="Method">public override string GetGenericInclude(string filename, string[] gentype)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GLCLPreProcessorConfig</Name>
        <Access>Public</Access>
        <Location left="828" top="339" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public override Verbosity VerbosityLevel { get; }</Member>
        <Member type="Property">public override List&lt;AbstractPlugin&gt; Plugins { get; }</Member>
        <Member type="Method">public override string GetGenericInclude(string filename, string[] gentype)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLPreProcessorConfig</Name>
        <Access>Public</Access>
        <Location left="1006" top="339" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public override Verbosity VerbosityLevel { get; }</Member>
        <Member type="Property">public override List&lt;AbstractPlugin&gt; Plugins { get; }</Member>
        <Member type="Method">public override string GetGenericInclude(string filename, string[] gentype)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextProcessingException</Name>
        <Access>Public</Access>
        <Location left="446" top="1119" />
        <Size width="422" height="99" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public TextProcessingException(string errorMessage, ApplicationException inner)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextProcessorAPI</Name>
        <Access>Public</Access>
        <Location left="828" top="584" />
        <Size width="554" height="213" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Dictionary&lt;string, APreProcessorConfig&gt; _configs = new Dictionary&lt;string, APreProcessorConfig&gt;</Member>
        <Member type="Method">public static string[] GenericIncludeToSource(string ext, string file, params string[] genType)</Member>
        <Member type="Method">public static string[] PreprocessLines(string filename, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">public static string[] PreprocessLines(string[] lines, string incDir, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">internal static string[] PreprocessLines(IFileContent file, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">public static string PreprocessSource(string filename, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">public static string PreprocessSource(string[] lines, string incDir, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">internal static string PreprocessSource(IFileContent filename, Dictionary&lt;string, bool&gt; defs)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FileContent</Name>
        <Access>Public</Access>
        <Location left="1374" top="42" />
        <Size width="162" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly string _incDir</Member>
        <Member type="Field">private readonly string[] _lines</Member>
        <Member type="Field">public bool HasValidFilepath = &gt; false</Member>
        <Member type="Field">private string Key = &gt; _incDir + "/memoryFile"</Member>
        <Member type="Field">private string Path = &gt; _incDir + "/memoryFile"</Member>
        <Member type="Constructor">public FileContent(string[] lines, string incDir)</Member>
        <Member type="Method">public bool TryGetLines(out string[] lines)</Member>
        <Member type="Method">public string GetKey()</Member>
        <Member type="Method">public void SetKey(string key)</Member>
        <Member type="Method">public string GetFilePath()</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="4" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1248</X>
          <Y>314</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1248</X>
          <Y>273</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="5" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>909</X>
          <Y>314</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>909</X>
          <Y>266</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="6" second="3">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1086</X>
          <Y>314</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1086</X>
          <Y>269</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Association" first="1" second="2">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>266</X>
          <Y>537</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartMultiplicity>*</StartMultiplicity>
        <EndMultiplicity>1</EndMultiplicity>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.Core</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>AbstractComponent</Name>
        <Access>Public</Access>
        <Location left="1235" top="332" />
        <Size width="509" height="502" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private bool _awake</Member>
        <Member type="Field">internal bool _destructionPending</Member>
        <Member type="Property">public bool Destroyed { get; private set; }</Member>
        <Member type="Method">protected virtual void Awake()</Member>
        <Member type="Method">internal void _Destroy()</Member>
        <Member type="Method">protected virtual void OnDestroy()</Member>
        <Member type="Method">protected virtual void OnKeyPress(object sender, KeyPressEventArgs e)</Member>
        <Member type="Method">protected virtual void OnKeyDown(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">protected virtual void OnKeyUp(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">internal void onPress(object sender, KeyPressEventArgs e)</Member>
        <Member type="Method">internal void onKeyDown(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">internal void onKeyUp(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">protected virtual void Update(float deltaTime)</Member>
        <Member type="Method">internal void updateObject(float deltaTime)</Member>
        <Member type="Method">protected virtual void OnInitialCollisionDetected(Collider other, CollidablePairHandler handler)</Member>
        <Member type="Method">protected virtual void OnCollisionEnded(Collider other, CollidablePairHandler handler)</Member>
        <Member type="Method">protected virtual void OnContactRemoved(Collider other, CollidablePairHandler handler, ContactData contact)</Member>
        <Member type="Method">protected virtual void OnContactCreated(Collider other, CollidablePairHandler handler, ContactData contact)</Member>
        <Member type="Method">internal void onInitialCollisionDetected(Collider other, CollidablePairHandler handler)</Member>
        <Member type="Method">internal void onCollisionEnded(Collider other, CollidablePairHandler handler)</Member>
        <Member type="Method">internal void onContactRemoved(Collider other, CollidablePairHandler handler, ContactData contact)</Member>
        <Member type="Method">internal void onContactCreated(Collider other, CollidablePairHandler handler, ContactData contact)</Member>
        <Member type="Property">public GameObject Owner { get; set; }</Member>
        <Member type="Method">public void Destroy()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AbstractScene</Name>
        <Access>Public</Access>
        <Location left="1025" top="332" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public BasicCamera Camera { get; private set; }</Member>
        <Member type="Method">public void SetCamera(BasicCamera c)</Member>
        <Member type="Method">internal void _initializeScene()</Member>
        <Member type="Method">public void DestroyScene()</Member>
        <Member type="Method">protected abstract void InitializeScene()</Member>
        <Member type="Method">public virtual void OnDestroy()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameObject</Name>
        <Access>Public</Access>
        <Location left="499" top="332" />
        <Size width="458" height="1369" />
        <Collapsed>False</Collapsed>
        <Member type="Field">internal static List&lt;GameObject&gt; ObjsWithAttachedRenderers = new List&lt;GameObject&gt;()</Member>
        <Member type="Field">private static Dictionary&lt;Collidable, Collider&gt; ObjsWithAttachedColliders = new Dictionary&lt;Collidable, Collider&gt;()</Member>
        <Member type="Field">internal Matrix4 _worldTransformCache</Member>
        <Member type="Field">private bool transformChanged = true</Member>
        <Member type="Field">private Matrix4 _transform = Matrix4.Identity</Member>
        <Member type="Field">private static int _objId</Member>
        <Member type="Field">private readonly Dictionary&lt;Type, AbstractComponent&gt; _components = new Dictionary&lt;Type, AbstractComponent&gt;()</Member>
        <Member type="Field">private readonly List&lt;GameObject&gt; _children = new List&lt;GameObject&gt;()</Member>
        <Member type="Field">private bool _destructionPending</Member>
        <Member type="Field">private bool _hasRendererInHierarchy</Member>
        <Member type="Field">private Physics.BEPUutilities.Vector3 _localPosition</Member>
        <Member type="Field">private Physics.BEPUutilities.Vector3 _scale = new Physics.BEPUutilities.Vector3(1f, 1f, 1f)</Member>
        <Member type="Field">private Physics.BEPUutilities.Quaternion _rotation = Quaternion.Identity</Member>
        <Member type="Property">public Engine.Physics.BEPUutilities.Vector4 AxisAngle { get; set; }</Member>
        <Member type="Destructor">~GameObject()</Member>
        <Member type="Method">public void Destroy()</Member>
        <Member type="Method">internal void _Destroy()</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Member type="Constructor">public GameObject(Vector3 localPosition, string name, GameObject parent)</Member>
        <Member type="Constructor">public GameObject(Vector3 localPosition, string name)</Member>
        <Member type="Constructor">public GameObject(string name)</Member>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Method">private static void addObjCount()</Member>
        <Member type="Method">public void AddComponent(AbstractComponent component)</Member>
        <Member type="Method">internal void RemoveDestroyedObjects()</Member>
        <Member type="Method">private void RemoveFromRenderLoop()</Member>
        <Member type="Method">public void RemoveComponent(Type componentType)</Member>
        <Member type="Method">public void RemoveComponent&lt;T&gt;()</Member>
        <Member type="Method">public T GetComponentIterative&lt;T&gt;()</Member>
        <Member type="Method">public T GetComponent&lt;T&gt;()</Member>
        <Member type="Method">public void ComputeWorldTransformCache(Matrix4 parentTransform)</Member>
        <Member type="Method">private void innerRemove(GameObject child)</Member>
        <Member type="Method">private void applyRenderHierarchy(bool hasRenderer)</Member>
        <Member type="Method">private void applyRenderHierarchyFromBelow(bool hasRenderer)</Member>
        <Member type="Method">private void innerAdd(GameObject child)</Member>
        <Member type="Method">public void Add(GameObject child)</Member>
        <Member type="Method">public static void Remove(GameObject child)</Member>
        <Member type="Method">public void DestroyAllChildren()</Member>
        <Member type="Method">public void SetParent(GameObject newParent)</Member>
        <Member type="Method">internal void registerCollider(Collider coll)</Member>
        <Member type="Method">internal void unregisterCollider(Collider coll)</Member>
        <Member type="Method">private void Events_InitialCollisionDetected(EntityCollidable sender, Collidable other, CollidablePairHandler pair)</Member>
        <Member type="Method">private void Events_CollisionEnded(EntityCollidable sender, Collidable other, CollidablePairHandler pair)</Member>
        <Member type="Method">private void Events_ContactRemoved(EntityCollidable sender, Collidable other, CollidablePairHandler pair, ContactData contact)</Member>
        <Member type="Method">private void Events_ContactCreated(EntityCollidable sender, Collidable other, CollidablePairHandler pair, ContactData contact)</Member>
        <Member type="Method">private void OnKeyPress(object sender, KeyPressEventArgs e)</Member>
        <Member type="Method">private void OnKeyUp(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">private void OnKeyDown(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">public void Update(float deltaTime)</Member>
        <Member type="Method">private void setSceneRecursively(AbstractScene newScene)</Member>
        <Member type="Method">public GameObject GetChildAt(int idx)</Member>
        <Member type="Method">public GameObject GetChildWithName(string name)</Member>
        <Member type="Method">public void Translate(Vector3 translation)</Member>
        <Member type="Method">public void ScaleBy(Vector3 scaleAmount)</Member>
        <Member type="Method">public Vector3 GetScale()</Member>
        <Member type="Method">public void Rotate(Vector3 axis, float angle)</Member>
        <Member type="Method">public void SetRotation(Quaternion rot)</Member>
        <Member type="Method">public Vector3 GetWorldPosition()</Member>
        <Member type="Method">public Matrix4 GetWorldTransform()</Member>
        <Member type="Method">public Vector3 GetLocalPosition()</Member>
        <Member type="Method">public Quaternion GetOrientation()</Member>
        <Member type="Method">public void SetLocalPosition(Vector3 pos)</Member>
        <Member type="Method">public void LookAt(GameObject other)</Member>
        <Member type="Method">public void LookAt(Vector3 worldPos)</Member>
        <Member type="Property">public IRenderingComponent RenderingComponent { get; private set; }</Member>
        <Member type="Property">public Matrix4 Transform { get; }</Member>
        <Member type="Property">public Engine.Physics.BEPUutilities.Vector3 LocalPosition { get; set; }</Member>
        <Member type="Property">public Engine.Physics.BEPUutilities.Vector3 Scale { get; set; }</Member>
        <Member type="Property">public Engine.Physics.BEPUutilities.Quaternion Rotation { get; set; }</Member>
        <Member type="Property">public AbstractScene Scene { get; internal set; }</Member>
        <Member type="Method">internal static void _KeyDown(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">internal static void _KeyUp(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">internal static void _KeyPress(object sender, KeyPressEventArgs e)</Member>
        <Member type="Property">public bool Destroyed { get; private set; }</Member>
        <Member type="Property">public GameObject Parent { get; private set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>EngineConfig</Name>
        <Access>Public</Access>
        <Location left="2463" top="332" />
        <Size width="417" height="298" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private const string NamespaceMatch = @"xmlns(:\w+)?=""([^""]+)""|xsi(:\w+)?=""([^""]+)"""</Member>
        <Member type="Method">private static List&lt;Tuple&lt;string, string&gt;&gt; CreateConfigObjects(Assembly asm, string nameSpace, XmlWriterSettings settings)</Member>
        <Member type="Method">private static List&lt;Tuple&lt;string, string&gt;&gt; CreateConfigObjects(object obj, XmlWriterSettings settings)</Member>
        <Member type="Method">private static object GetValue(MemberInfo info, object reference)</Member>
        <Member type="Method">private static void SetValue(MemberInfo info, object reference, object value)</Member>
        <Member type="Method">private static Type GetMemberType(MemberInfo info)</Member>
        <Member type="Method">private static Tuple&lt;string, MemberInfo&gt;[] GetPropertiesWithAttribute(Type t, BindingFlags flags)</Member>
        <Member type="Method">public static void LoadConfig(string configName, ref object obj)</Member>
        <Member type="Method">private static Tuple&lt;string, MemberInfo&gt;[] GetPropertiesWithAttribute&lt;T&gt;(Assembly asm, string nameSpace)</Member>
        <Member type="Method">private static Tuple&lt;string, MemberInfo&gt;[] GetPropertiesWithAttribute(Type t, BindingFlags flags)</Member>
        <Member type="Method">public static void LoadConfig(string configName, Assembly asm, string nameSpace)</Member>
        <Member type="Method">private static XmlNode GetObject(XmlDocument doc, string fullname)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>EngineSettings</Name>
        <Access>Public</Access>
        <Location left="2463" top="659" />
        <Size width="261" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int Depth { get; set; }</Member>
        <Member type="Property">public int Stencil { get; set; }</Member>
        <Member type="Property">public int Samples { get; set; }</Member>
        <Member type="Property">public int InitWidth { get; set; }</Member>
        <Member type="Property">public int InitHeight { get; set; }</Member>
        <Member type="Property">public int PhysicsThreadCount { get; set; }</Member>
        <Member type="Property">public string Title { get; set; }</Member>
        <Member type="Property">public VSyncMode VSync { get; set; }</Member>
        <Member type="Property">public GameWindowFlags WindowFlags { get; set; }</Member>
        <Member type="Property">public DebugSettings DebugSettings { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameEngine</Name>
        <Access>Public</Access>
        <Location left="1988" top="841" />
        <Size width="427" height="579" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private GameWindow Window</Member>
        <Member type="Field">protected Renderer Renderer</Member>
        <Member type="Field">private bool _changeScene</Member>
        <Member type="Field">private Type _nextScene</Member>
        <Member type="Field">private int FrameCounter</Member>
        <Member type="Field">private int RenderFrameCounter</Member>
        <Member type="Field">int newField</Member>
        <Member type="Property">private DebugSettings EngineDefault { get; }</Member>
        <Member type="Property">public EngineSettings Settings { get; }</Member>
        <Member type="Constructor">public GameEngine(EngineSettings settings)</Member>
        <Member type="Property">public static GameEngine Instance { get; private set; }</Member>
        <Member type="Method">public void Initialize()</Member>
        <Member type="Method">private void initializeWindow()</Member>
        <Member type="Method">private void initializeRenderer()</Member>
        <Member type="Method">private void Window_MouseMove(object sender, OpenTK.Input.MouseMoveEventArgs e)</Member>
        <Member type="Method">public void InitializeScene&lt;T&gt;()</Member>
        <Member type="Method">public void AddRenderTarget(RenderTarget target)</Member>
        <Member type="Method">public void RemoveRenderTarget(RenderTarget target)</Member>
        <Member type="Method">public void Run()</Member>
        <Member type="Method">public Vector3 ConvertScreenToWorldCoords(int x, int y)</Member>
        <Member type="Property">public Vector2 MousePosition { get; private set; }</Member>
        <Member type="Method">private static Vector4 UnProject(ref Matrix4 projection, Matrix4 view, Size viewport, Vector2 mouse)</Member>
        <Member type="Method">protected virtual void Update(object sender, FrameEventArgs e)</Member>
        <Member type="Method">private void OnResize(object o, EventArgs e)</Member>
        <Member type="Property">public AbstractScene CurrentScene { get; private set; }</Member>
        <Member type="Property">public int Width { get; }</Member>
        <Member type="Property">public int Height { get; }</Member>
        <Member type="Property">public float AspectRatio { get; }</Member>
        <Member type="Method">private void OnRender(object o, EventArgs e)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Interpolations</Name>
        <Access>Public</Access>
        <Location left="1988" top="332" />
        <Size width="418" height="434" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static float FakePow(float basis, float exp)</Member>
        <Member type="Method">public static float IntPow(float basis, int exp)</Member>
        <Member type="Method">public static float InverseLerp(float min, float max, float value)</Member>
        <Member type="Method">public static float Slerp(float t)</Member>
        <Member type="Method">public static float Flip(float t)</Member>
        <Member type="Method">public static float Scale(float t, float scale)</Member>
        <Member type="Method">public static float Mix(float a, float b, float weightB)</Member>
        <Member type="Method">public static float SmoothStart(float t, int smoothness = 1)</Member>
        <Member type="Method">public static float SmoothStart(float t, float smoothness = 1)</Member>
        <Member type="Method">public static float SmoothStop(float t, int smoothness = 1)</Member>
        <Member type="Method">public static float SmoothStop(float t, float smoothness = 1)</Member>
        <Member type="Method">public static float SmoothStep(float t, float smoothnessStart = 1, float smoothnessStop = 1)</Member>
        <Member type="Method">public static float Arch2(float t)</Member>
        <Member type="Method">public static float SmoothStopArch3(float t)</Member>
        <Member type="Method">public static float SmoothStartArch3(float t)</Member>
        <Member type="Method">public static float SmoothStepArch4(float t)</Member>
        <Member type="Method">public static float BellCurve(float t, float smoothness = 1)</Member>
        <Member type="Method">public static float NormalizedBezier(float B, float C, float t)</Member>
        <Member type="Method">public static Vector3[] Chaikin(Vector3[] pts, int smoothness)</Member>
        <Member type="Method">public static Vector3[] Chaikin(Vector3[] pts)</Member>
        <Member type="Method">public static List&lt;Vector3&gt; SmoothLine(List&lt;Vector3&gt; cornerPoints, float smoothness)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>IDestroyable</Name>
        <Access>Public</Access>
        <Location left="1025" top="16" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void Destroy()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="2" second="7">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="1" second="2">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="0" second="7">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.DataTypes</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Texture</Name>
        <Access>Public</Access>
        <Location left="313" top="401" />
        <Size width="162" height="264" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Texture _defaultTexture</Member>
        <Member type="Field">private bool _disposed</Member>
        <Member type="Field">private bool _dontDispose</Member>
        <Member type="Property">public static Texture DefaultTexture { get; }</Member>
        <Member type="Property">public TextureType TexType { get; set; }</Member>
        <Member type="Property">public int TextureId { get; }</Member>
        <Member type="Property">public float Width { get; }</Member>
        <Member type="Property">public float Height { get; }</Member>
        <Member type="Constructor">internal Texture(int textureId)</Member>
        <Member type="Method">public Texture Copy()</Member>
        <Member type="Method">public void Dispose()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Mesh</Name>
        <Access>Public</Access>
        <Location left="107" top="401" />
        <Size width="162" height="298" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Mesh _defaultMesh</Member>
        <Member type="Field">public readonly int _ebo</Member>
        <Member type="Field">public readonly int _vbo</Member>
        <Member type="Field">public readonly int _vao</Member>
        <Member type="Field">private bool _disposed</Member>
        <Member type="Field">private bool _dontDispose</Member>
        <Member type="Field">public readonly int DrawCount</Member>
        <Member type="Constructor">internal Mesh(int ebo, int vbo, int vao, int drawCount)</Member>
        <Member type="Method">public Mesh Copy()</Member>
        <Member type="Method">public void Dispose()</Member>
        <Member type="Method">private static Mesh GetDefaultMesh()</Member>
        <Member type="Property">public static Mesh DefaultMesh { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioFile</Name>
        <Access>Public</Access>
        <Location left="313" top="96" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int Buffer { get; }</Member>
        <Member type="Property">public int BufferSize { get; }</Member>
        <Member type="Constructor">internal AudioFile(int buffer, int bufferSize)</Member>
        <Member type="Method">public void Dispose()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameFont</Name>
        <Access>Public</Access>
        <Location left="517" top="401" />
        <Size width="162" height="264" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly Dictionary&lt;char, TextCharacter&gt; _fontAtlas</Member>
        <Member type="Field">private readonly FontFace _fontFace</Member>
        <Member type="Field">private static GameFont _defaultFont</Member>
        <Member type="Property">public int Size { get; }</Member>
        <Member type="Property">public FaceMetrics Metrics { get; }</Member>
        <Member type="Method">public void Dispose()</Member>
        <Member type="Method">public bool TryGetCharacter(char character, out TextCharacter charInfo)</Member>
        <Member type="Constructor">internal GameFont(FontFace ff, int size, Dictionary&lt;char, TextCharacter&gt; fontAtlas)</Member>
        <Member type="Property">public static GameFont DefaultFont { get; }</Member>
        <Member type="Method">private static GameFont GetDefaultFont()</Member>
        <Member type="Property">public string Name { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Vertex</Name>
        <Access>Public</Access>
        <Location left="107" top="96" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Vector3 Position</Member>
        <Member type="Field">public Vector3 Normal</Member>
        <Member type="Field">public Vector2 UV</Member>
        <Member type="Field">public Vector3 Tangent</Member>
        <Member type="Field">public Vector3 Bittangent</Member>
        <Member type="Field">public static readonly int VERTEX_BYTE_SIZE = sizeof(float) * 14</Member>
        <Member type="Method">public bool Equals(Vertex other)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextCharacter</Name>
        <Access>Public</Access>
        <Location left="517" top="96" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Texture GlTexture { get; set; }</Member>
        <Member type="Property">public int Width { get; set; }</Member>
        <Member type="Property">public int Height { get; set; }</Member>
        <Member type="Property">public float BearingX { get; set; }</Member>
        <Member type="Property">public float BearingY { get; set; }</Member>
        <Member type="Property">public float Advance { get; set; }</Member>
        <Member type="Method">public void Dispose()</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="5" second="3">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.IO</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>AudioLoader</Name>
        <Access>Public</Access>
        <Location left="10" top="95" />
        <Size width="492" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Dictionary&lt;string, Type&gt; _formats = new Dictionary&lt;string, Type&gt;()</Member>
        <Member type="Method">private static bool TryGetFormatProvider(string filename, out IAudioFormatLoader formatProvider)</Member>
        <Member type="Method">private static ALFormat GetSoundFormat(int channels, int bits)</Member>
        <Member type="Method">public static bool TryLoad(string filename, out AudioFile clip)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextureLoader</Name>
        <Access>Public</Access>
        <Location left="10" top="525" />
        <Size width="492" height="351" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static Texture BytesToTexture(IntPtr ptr, int width, int height)</Member>
        <Member type="Method">public static Texture BytesToTexture(byte[] buffer, int width, int height)</Member>
        <Member type="Method">public static Texture ParameterToTexture(int width, int height)</Member>
        <Member type="Method">private static byte[] TextureToByteArray(Texture tex)</Member>
        <Member type="Method">public static MemoryBuffer TextureToMemoryBuffer(Texture tex)</Member>
        <Member type="Method">public static void Update(Texture tex, byte[] data, int width, int height)</Member>
        <Member type="Method">public static byte[] BitmapToBytes(Bitmap bmp)</Member>
        <Member type="Method">public static Texture BitmapToTexture(Bitmap bmp)</Member>
        <Member type="Method">private static Texture[] AssimpSceneToTextures(Scene scene)</Member>
        <Member type="Method">private static byte[] flattenImageData(Texel[] imageData)</Member>
        <Member type="Method">private static void TexelToByteSequence(int startidx, byte[] arr, Texel txl)</Member>
        <Member type="Method">public static Texture AssimpEmbeddedToTexture(EmbeddedTexture tex)</Member>
        <Member type="Method">public static Texture FileToTexture(string file)</Member>
        <Member type="Method">private static void DefaultTexParameter()</Member>
        <Member type="Method">private static Texture Copy(Texture other)</Member>
        <Member type="Method">internal static List&lt;Texture&gt; LoadMaterialTextures(Material m, TextureType texType, string dir)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>MeshLoader</Name>
        <Access>Public</Access>
        <Location left="10" top="255" />
        <Size width="492" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static Mesh FileToMesh(string filename)</Member>
        <Member type="Method">public static Mesh[] FileToMeshes(string filename)</Member>
        <Member type="Method">internal static List&lt;Mesh&gt; LoadModel(Stream stream)</Member>
        <Member type="Method">private static List&lt;Mesh&gt; LoadModel(string path)</Member>
        <Member type="Method">private static List&lt;Mesh&gt; LoadAssimpScene(Scene s, string path)</Member>
        <Member type="Method">private static void processNode(Node node, Scene s, List&lt;Mesh&gt; meshes, string dir)</Member>
        <Member type="Method">private static Mesh processMesh(AssimpMesh mesh, Scene s, string dir)</Member>
        <Member type="Method">private static IntPtr offsetOf(string name)</Member>
        <Member type="Method">private static void setupMesh(uint[] indices, Vertex[] vertices, out int vao, out int vbo, out int ebo)</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Prefabs</Name>
        <Access>Public</Access>
        <Location left="1018" top="371" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Texture _white</Member>
        <Member type="Field">private static Texture _black</Member>
        <Member type="Field">private static Mesh _cube = null</Member>
        <Member type="Field">private static Mesh _sphere = null</Member>
        <Member type="Property">public static Mesh Cube { get; }</Member>
        <Member type="Property">public static Mesh Sphere { get; }</Member>
        <Member type="Property">public static Texture White { get; }</Member>
        <Member type="Property">public static Texture Black { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IAudioFormatLoader</Name>
        <Access>Public</Access>
        <Location left="616" top="213" />
        <Size width="492" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Method">bool TryLoadFile(string file, out byte[] data, out int channel, out int bits, out int bitRate)</Member>
      </Entity>
    </Entities>
    <Relationships />
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.Audio</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>AbstractAudioSource</Name>
        <Access>Public</Access>
        <Location left="235" top="158" />
        <Size width="162" height="417" />
        <Collapsed>False</Collapsed>
        <Member type="Field">protected readonly int source</Member>
        <Member type="Field">private AudioFile _clip</Member>
        <Member type="Property">public AudioFile Clip { get; set; }</Member>
        <Member type="Property">public ALSourceState State { get; set; }</Member>
        <Member type="Property">public bool IsPlaying { get; }</Member>
        <Member type="Property">public float Pitch { get; set; }</Member>
        <Member type="Property">public float MaxDistance { get; set; }</Member>
        <Member type="Property">public float ReferenceDistance { get; set; }</Member>
        <Member type="Property">public float MaxGain { get; set; }</Member>
        <Member type="Property">public float MinGain { get; set; }</Member>
        <Member type="Property">public float Gain { get; set; }</Member>
        <Member type="Property">public float AirAbsorptionFactor { get; set; }</Member>
        <Member type="Property">public float RoomRollOffFactor { get; set; }</Member>
        <Member type="Property">public float RollOffFactor { get; set; }</Member>
        <Member type="Property">public float TrackPosition { get; set; }</Member>
        <Member type="Property">public bool Looping { get; set; }</Member>
        <Member type="Method">public void Play()</Member>
        <Member type="Method">public void Pause()</Member>
        <Member type="Method">public void Stop()</Member>
        <Member type="Constructor">protected AbstractAudioSource()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioListener</Name>
        <Access>Public</Access>
        <Location left="423" top="158" />
        <Size width="197" height="95" />
        <Collapsed>False</Collapsed>
        <Member type="Method">protected override void Update(float deltaTime)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioManager</Name>
        <Access>Public</Access>
        <Location left="683" top="201" />
        <Size width="162" height="133" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static AudioContext _context</Member>
        <Member type="Method">public static void Initialize()</Member>
        <Member type="Property">public static AlcError GetCurrentALcError { get; }</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioSourceComponent</Name>
        <Access>Public</Access>
        <Location left="10" top="646" />
        <Size width="269" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public bool UpdatePosition { get; set; }</Member>
        <Member type="Method">protected override void OnDestroy()</Member>
        <Member type="Method">protected override void Update(float deltaTime)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>BackgroundAudioSource</Name>
        <Access>Public</Access>
        <Location left="337" top="646" />
        <Size width="241" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AbstractComponent</Name>
        <Access>Public</Access>
        <Location left="235" top="27" />
        <Size width="162" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="4" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="3" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="0" second="5">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="1" second="5">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.Physics</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>PhysicsEngine</Name>
        <Access>Public</Access>
        <Location left="300" top="259" />
        <Size width="162" height="298" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Space _space</Member>
        <Member type="Field">private static ForceUpdater _fu</Member>
        <Member type="Property">public static TKVector3 Gravity { get; set; }</Member>
        <Member type="Method">public static void Initialize()</Member>
        <Member type="Method">public static Ray ConstructRayFromMousePosition(TKVector3 origin)</Member>
        <Member type="Method">public static bool RayCastAll(Ray ray, float maxLength, string layerInfo, out KeyValuePair&lt;Collider, RayHit&gt;[] collisions)</Member>
        <Member type="Method">public static bool RayCastAll(Ray ray, float maxLength, int layerInfo, out KeyValuePair&lt;Collider, RayHit&gt;[] collisions)</Member>
        <Member type="Method">public static bool RayCastFirst(Ray ray, float maxLength, string layerInfo, out KeyValuePair&lt;Collider, RayHit&gt; collision)</Member>
        <Member type="Method">public static bool RayCastFirst(Ray ray, float maxLength, int layerInfo, out KeyValuePair&lt;Collider, RayHit&gt; collision)</Member>
        <Member type="Method">private static bool FilterFunc(BroadPhaseEntry entry, int layerInfo)</Member>
        <Member type="Method">public static void AddEntity(Entity physicsCollider)</Member>
        <Member type="Method">public static void RemoveEntity(Entity physicsCollider)</Member>
        <Member type="Method">internal static void Update(float deltaTime)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>LayerManager</Name>
        <Access>Public</Access>
        <Location left="535" top="259" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static List&lt;Tuple&lt;Layer, string&gt;&gt; _internalLayerStore = new List&lt;Tuple&lt;Layer, string&gt;&gt;()</Member>
        <Member type="Field">private static Dictionary&lt;string, int&gt; _registeredLayers = new Dictionary&lt;string, int&gt;()</Member>
        <Member type="Method">public static int RegisterLayer(string name, Layer layer)</Member>
        <Member type="Method">private static Layer IDToInternalLayer(int layer)</Member>
        <Member type="Method">public static int NameToLayer(string name)</Member>
        <Member type="Method">public static string LayerToName(int layer)</Member>
        <Member type="Method">public static void DisableCollisions(int layerA, int layerB)</Member>
        <Member type="Method">public static bool AllowCollision(int layerA, int layerB)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Layer</Name>
        <Access>Public</Access>
        <Location left="535" top="584" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public ushort SubgroupMembership { get; set; }</Member>
        <Member type="Property">public ushort CollidableSubgroups { get; set; }</Member>
        <Member type="Property">public int GroupId { get; set; }</Member>
        <Member type="Constructor">public Layer(int groupId)</Member>
        <Member type="Method">public void DisableCollision(int subgroupId)</Member>
        <Member type="Constructor">public Layer(int groupId, int subgroupId)</Member>
        <Member type="Method">public static void DisableCollision(ref Layer filterA, ref Layer filterB)</Member>
        <Member type="Method">public static bool AllowCollision(Layer a, Layer b)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Collider</Name>
        <Access>Public</Access>
        <Location left="931" top="259" />
        <Size width="300" height="334" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private bool _colliderRemoved</Member>
        <Member type="Constructor">public Collider(Entity shape, string layerName)</Member>
        <Member type="Constructor">public Collider(Entity shape, int layerID)</Member>
        <Member type="Destructor">~Collider()</Member>
        <Member type="Method">protected override void Awake()</Member>
        <Member type="Method">protected override void OnDestroy()</Member>
        <Member type="Method">public void SetVelocityLinear(Vector3 vel)</Member>
        <Member type="Method">public void SetVelocityAngular(Vector3 vel)</Member>
        <Member type="Method">private void enforceTranslationConstraints()</Member>
        <Member type="Method">private void enforceRotationConstraints()</Member>
        <Member type="Method">protected override void Update(float deltaTime)</Member>
        <Member type="Property">public Entity PhysicsCollider { get; }</Member>
        <Member type="Property">public ColliderConstraints ColliderConstraints { get; set; }</Member>
        <Member type="Property">public int CollisionLayer { get; set; }</Member>
        <Member type="Property">public bool IsTrigger { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AbstractComponent</Name>
        <Access>Public</Access>
        <Location left="931" top="78" />
        <Size width="162" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="1" second="2">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Generalization" first="3" second="4">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.OpenCL</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>CLAPI</Name>
        <Access>Public</Access>
        <Location left="26" top="43" />
        <Size width="828" height="502" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static CLAPI _instance</Member>
        <Member type="Field">private Context _context</Member>
        <Member type="Field">private CommandQueue _commandQueue</Member>
        <Member type="Method">internal static CommandQueue GetQueue()</Member>
        <Member type="Constructor">public CLAPI()</Member>
        <Member type="Method">public static void Reinitialize()</Member>
        <Member type="Method">private void InitializeOpenCL()</Member>
        <Member type="Method">internal static Program CreateCLProgramFromSource(string source)</Member>
        <Member type="Method">internal static Program CreateCLProgramFromSource(string[] source)</Member>
        <Member type="Method">internal static Kernel CreateKernelFromName(Program program, string name)</Member>
        <Member type="Method">public static MemoryBuffer CreateEmpty&lt;T&gt;(int size, MemoryFlag flags)</Member>
        <Member type="Method">public static MemoryBuffer CreateBuffer&lt;T&gt;(T[] data, MemoryFlag flags)</Member>
        <Member type="Method">public static MemoryBuffer CreateBuffer(object[] data, Type t, MemoryFlag flags)</Member>
        <Member type="Method">public static MemoryBuffer CreateFromImage(Bitmap bmp, MemoryFlag flags)</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Member type="Property">private static CLAPI Instance { get; }</Member>
        <Member type="Method">public static T[] CreateRandom&lt;T&gt;(int size, byte[] channelEnableState, RandomFunc&lt;T&gt; rnd, bool uniform)</Member>
        <Member type="Method">public static T[] CreateRandom&lt;T&gt;(int size, byte[] channelEnableState, RandomFunc&lt;T&gt; rnd)</Member>
        <Member type="Method">public static void WriteRandom&lt;T&gt;(T[] buffer, byte[] channelEnableState, RandomFunc&lt;T&gt; rnd, bool uniform)</Member>
        <Member type="Method">public static void WriteRandom&lt;T&gt;(T[] buffer, byte[] channelEnableState, RandomFunc&lt;T&gt; rnd)</Member>
        <Member type="Method">public static void WriteRandom&lt;T&gt;(MemoryBuffer buf, RandomFunc&lt;T&gt; rnd, byte[] enabledChannels, bool uniform)</Member>
        <Member type="Method">public static void WriteRandom&lt;T&gt;(MemoryBuffer buf, RandomFunc&lt;T&gt; rnd, byte[] enabledChannels)</Member>
        <Member type="Method">public static void WriteToBuffer&lt;T&gt;(MemoryBuffer buf, T[] values)</Member>
        <Member type="Method">public static T[] ReadBuffer&lt;T&gt;(MemoryBuffer buf, int size)</Member>
        <Member type="Method">public static void Run(CLKernel kernel, MemoryBuffer image, int3 dimensions, float genTypeMaxVal, MemoryBuffer enabledChannels, int channelCount)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CLKernel</Name>
        <Access>Public</Access>
        <Location left="928" top="614" />
        <Size width="511" height="272" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Dictionary&lt;string, KernelParameter&gt; Parameter { get; }</Member>
        <Member type="Property">public string Name { get; }</Member>
        <Member type="Property">private Kernel Kernel { get; }</Member>
        <Member type="Constructor">public CLKernel(Kernel k, string name, KernelParameter[] parameter)</Member>
        <Member type="Method">public void SetBuffer(string parameterName, MemoryObject obj)</Member>
        <Member type="Method">public void SetArg(string parameterName, object value)</Member>
        <Member type="Method">public void SetBuffer(int index, MemoryObject obj)</Member>
        <Member type="Method">public void SetArg(int index, object value)</Member>
        <Member type="Method">internal void Run(CommandQueue cq, MemoryBuffer image, int3 dimensions, float genTypeMaxVal, MemoryBuffer enabledChannels, int channelCount)</Member>
        <Member type="Method">public void Run(CommandQueue cq, int workdim, int groupsize)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CLProgram</Name>
        <Access>Public</Access>
        <Location left="895" top="294" />
        <Size width="325" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly string _filePath</Member>
        <Member type="Field">private readonly string _genType</Member>
        <Member type="Property">public Dictionary&lt;string, CLKernel&gt; ContainedKernels { get; }</Member>
        <Member type="Property">public Program ClProgramHandle { get; set; }</Member>
        <Member type="Constructor">public CLProgram(string FilePath, string genType)</Member>
        <Member type="Method">internal static int GetVectorNum(string dtStr)</Member>
        <Member type="Method">private void Initialize()</Member>
        <Member type="Method">private static string[] FindKernelNames(string source)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>KernelDatabase</Name>
        <Access>Public</Access>
        <Location left="984" top="20" />
        <Size width="405" height="204" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly string _folderName</Member>
        <Member type="Field">public readonly Dictionary&lt;string, CLKernel&gt; LoadedKernels</Member>
        <Member type="Property">public string GenDataType { get; }</Member>
        <Member type="Constructor">public KernelDatabase(string folderName, TypeEnums.DataTypes genDataType)</Member>
        <Member type="Method">private void Initialize()</Member>
        <Member type="Method">public void AddProgram(string file)</Member>
        <Member type="Method">public bool TryGetCLKernel(string name, out CLKernel kernel)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>KernelParameter</Name>
        <Access>Public</Access>
        <Location left="943" top="984" />
        <Size width="511" height="332" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static List&lt;Tuple&lt;string, float, TypeEnums.DataTypes&gt;&gt; DataTypePairs</Member>
        <Member type="Method">public object CastToType(object value)</Member>
        <Member type="Method">public static TypeEnums.DataTypes GetEnumFromType(Type t)</Member>
        <Member type="Method">public static object CastToType(Type t, object value)</Member>
        <Member type="Method">public static KernelParameter[] CreateKernelParametersFromKernelCode(string code, int startIndex, int endIndex)</Member>
        <Member type="Method">public static string GetDataString(TypeEnums.DataTypes type)</Member>
        <Member type="Method">public static float GetDataMaxSize(string genType)</Member>
        <Member type="Method">public static TypeEnums.DataTypes GetDataType(string str)</Member>
        <Member type="Method">private static MemoryScope GetMemoryScope(string modifier)</Member>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public TypeEnums.DataTypes DataType { get; set; }</Member>
        <Member type="Property">public bool IsArray { get; set; }</Member>
        <Member type="Property">public int Id { get; set; }</Member>
        <Member type="Property">public MemoryScope MemScope { get; set; }</Member>
        <Member type="Property">internal static Type[] Converters { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="3" second="1">
        <Label>Containns</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1316</X>
          <Y>582</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="2" second="1">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1063</X>
          <Y>589</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="1" second="4">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.OpenFL</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>CLBufferInfo</Name>
        <Access>Public</Access>
        <Location left="878" top="312" />
        <Size width="255" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public MemoryBuffer Buffer</Member>
        <Member type="Property">public bool IsInternal { get; private set; }</Member>
        <Member type="Property">public string DefinedBufferName { get; private set; }</Member>
        <Member type="Constructor">internal CLBufferInfo(MemoryBuffer buffer, bool isInternal)</Member>
        <Member type="Method">internal void SetInternalState(bool internalState)</Member>
        <Member type="Method">internal void SetKey(string key)</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CLTypeConverter</Name>
        <Access>Public</Access>
        <Location left="543" top="745" />
        <Size width="347" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Method">private static float ConvertRange(float value, float oldMax, float max)</Member>
        <Member type="Method">public static object Convert(Type newType, object value)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLFunctionInfo</Name>
        <Access>Public</Access>
        <Location left="543" top="887" />
        <Size width="295" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public readonly FlFunction Function</Member>
        <Member type="Field">public readonly bool LeaveStack</Member>
        <Member type="Constructor">public FLFunctionInfo(FlFunction flFunc, bool leaveStack)</Member>
        <Member type="Method">public void Run()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>InterpreterState</Name>
        <Access>Public</Access>
        <Location left="1229" top="487" />
        <Size width="319" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int Line { get; }</Member>
        <Member type="Property">public CLBufferInfo ActiveBuffer { get; }</Member>
        <Member type="Property">public Stack&lt;object&gt; ArgumentStack { get; }</Member>
        <Member type="Constructor">internal InterpreterState(int line, CLBufferInfo activeBuffer, Stack&lt;object&gt; argumentStack)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>InterpreterStepResult</Name>
        <Access>Public</Access>
        <Location left="937" top="745" />
        <Size width="291" height="267" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static StringBuilder _sb = new StringBuilder()</Member>
        <Member type="Property">public bool HasJumped { get; set; }</Member>
        <Member type="Property">public bool Terminated { get; set; }</Member>
        <Member type="Property">public bool TriggeredDebug { get; set; }</Member>
        <Member type="Property">public byte[] ActiveChannels { get; set; }</Member>
        <Member type="Property">public List&lt;string&gt; DefinedBuffers { get; set; }</Member>
        <Member type="Property">public List&lt;string&gt; BuffersInJumpStack { get; set; }</Member>
        <Member type="Property">public string DebugBufferName { get; set; }</Member>
        <Member type="Property">public string SourceLine { get; set; }</Member>
        <Member type="Method">public bool Equals(InterpreterStepResult other)</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Interpreter</Name>
        <Access>Public</Access>
        <Location left="13" top="130" />
        <Size width="495" height="961" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private const string DefineKey = "--define texture "</Member>
        <Member type="Field">private const string ScriptDefineKey = "--define script "</Member>
        <Member type="Field">private const int FLHeaderArgCount = 5</Member>
        <Member type="Field">private const string CommentPrefix = "#"</Member>
        <Member type="Field">private const string EntrySignature = "Main"</Member>
        <Member type="Field">private const string InputBufferName = "in"</Member>
        <Member type="Field">private const string FunctionNamePostfix = ":"</Member>
        <Member type="Field">private const string WordSeparator = " "</Member>
        <Member type="Field">private const string FilepathIndicator = "\""</Member>
        <Member type="Field">private static readonly CultureInfo NumberParsingHelper = new CultureInfo(CultureInfo.InvariantCulture.LCID)</Member>
        <Member type="Field">private static readonly Random rnd = new Random()</Member>
        <Member type="Field">private readonly Dictionary&lt;string, FLFunctionInfo&gt; _flFunctions</Member>
        <Member type="Field">private KernelDatabase _kernelDb</Member>
        <Member type="Field">private int _currentIndex</Member>
        <Member type="Field">private int _currentWord</Member>
        <Member type="Field">private Stack&lt;object&gt; _currentArgStack</Member>
        <Member type="Field">private CLBufferInfo _currentBuffer</Member>
        <Member type="Field">private readonly Stack&lt;InterpreterState&gt; _jumpStack = new Stack&lt;InterpreterState&gt;()</Member>
        <Member type="Field">private int _width</Member>
        <Member type="Field">private int _height</Member>
        <Member type="Field">private int _depth</Member>
        <Member type="Field">private int _channelCount</Member>
        <Member type="Field">private byte[] _activeChannels</Member>
        <Member type="Field">private MemoryBuffer _activeChannelBuffer</Member>
        <Member type="Field">private bool _leaveStack</Member>
        <Member type="Field">private bool _ignoreDebug</Member>
        <Member type="Field">private InterpreterStepResult _stepResult</Member>
        <Member type="Field">int newField</Member>
        <Member type="Property">public bool Terminated { get; private set; }</Member>
        <Member type="Method">private void Reset()</Member>
        <Member type="Method">public void Reset(string file, MemoryBuffer input, int width, int height, int depth, int channelCount, KernelDatabase kernelDB)</Member>
        <Member type="Method">public void ReleaseResources()</Member>
        <Member type="Method">public void Reset(string file, MemoryBuffer input, int width, int height, int depth, int channelCount, KernelDatabase kernelDB, bool ignoreDebug)</Member>
        <Member type="Method">private static string SanitizeLine(string line)</Member>
        <Member type="Method">private static string[] SplitLine(string line)</Member>
        <Member type="Method">private static bool IsSurroundedBy(string text, string surrStr)</Member>
        <Member type="Method">private void Execute()</Member>
        <Member type="Method">private LineAnalysisResult AnalyzeLine(FLInstructionData data)</Member>
        <Member type="Method">private void DetectEnd()</Member>
        <Member type="Method">private void JumpTo(int index, bool leaveBuffer = false)</Member>
        <Member type="Method">private static Dictionary&lt;string, int&gt; ParseJumpLocations(List&lt;string&gt; source)</Member>
        <Member type="Method">private static void ParseDefines(string key, DefineHandler handler, List&lt;string&gt; source, Dictionary&lt;string, CLBufferInfo&gt; defines, int width, int height, int depth, int channelCount, KernelDatabase kernelDb)</Member>
        <Member type="Method">private static List&lt;string&gt; LoadSource(string file, int channelCount)</Member>
        <Member type="Method">private static FLScriptData LoadScriptData(string file, CLBufferInfo inBuffer, int width, int height, int depth, int channelCount, KernelDatabase db, Dictionary&lt;string, FLFunctionInfo&gt; funcs)</Member>
        <Member type="Method">private static FLInstructionData GetInstructionData(string line, Dictionary&lt;string, CLBufferInfo&gt; defines, Dictionary&lt;string, int&gt; jumpLocations, Dictionary&lt;string, FLFunctionInfo&gt; funcs, KernelDatabase db)</Member>
        <Member type="Method">public MemoryBuffer GetActiveBuffer()</Member>
        <Member type="Method">public CLBufferInfo GetBuffer(string name)</Member>
        <Member type="Method">internal CLBufferInfo GetActiveBufferInternal()</Member>
        <Member type="Method">public T[] GetResult&lt;T&gt;()</Member>
        <Member type="Method">public InterpreterStepResult Step()</Member>
        <Member type="Property">private int EntryIndex { get; }</Member>
        <Member type="Property">private int InputBufferSize { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLArgumentData</Name>
        <Access>Public</Access>
        <Location left="543" top="572" />
        <Size width="266" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public object value</Member>
        <Member type="Field">public FLArgumentType argType</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLInstructionData</Name>
        <Access>Public</Access>
        <Location left="543" top="377" />
        <Size width="266" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public object Instruction</Member>
        <Member type="Field">public FLInstructionType InstructionType</Member>
        <Member type="Field">public List&lt;FLArgumentData&gt; Arguments</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLScriptData</Name>
        <Access>Public</Access>
        <Location left="561" top="130" />
        <Size width="266" height="162" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public List&lt;string&gt; Source</Member>
        <Member type="Field">public Dictionary&lt;string, CLBufferInfo&gt; Defines</Member>
        <Member type="Field">public Dictionary&lt;string, int&gt; JumpLocations</Member>
        <Member type="Field">public List&lt;FLInstructionData&gt; ParsedSource</Member>
        <Member type="Constructor">public FLScriptData(List&lt;string&gt; source)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="8" second="0">
        <Label>Contains</Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>849</X>
          <Y>317</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>849</X>
          <Y>342</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="8" second="7">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="7" second="6">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="3" second="0">
        <Label>Contains</Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1</EndMultiplicity>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.Rendering</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>ShaderProgram</Name>
        <Access>Public</Access>
        <Location left="1042" top="228" />
        <Size width="162" height="366" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private Dictionary&lt;string, int&gt; uniformCache = new Dictionary&lt;string, int&gt;()</Member>
        <Member type="Field">private static ShaderProgram _defaultShader</Member>
        <Member type="Field">private static int _lastUsedPrgID = -1</Member>
        <Member type="Field">private readonly int _prgId</Member>
        <Member type="Constructor">public ShaderProgram()</Member>
        <Member type="Method">public static bool TryCreate(Dictionary&lt;ShaderType, string&gt; subshaders, out ShaderProgram program)</Member>
        <Member type="Method">public void Dispose()</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Member type="Method">public void Use()</Member>
        <Member type="Method">public int GetAttribLocation(string name)</Member>
        <Member type="Method">public void AddUniformCache(string name)</Member>
        <Member type="Method">public int GetUniformLocation(string name)</Member>
        <Member type="Method">public int GetUniformLocationUncached(string name)</Member>
        <Member type="Method">private static bool TryCompileShader(ShaderType type, string source, out int shaderID)</Member>
        <Member type="Property">public static ShaderProgram DefaultShader { get; }</Member>
        <Member type="Method">private static ShaderProgram GetDefaultShader()</Member>
        <Member type="Method">internal static bool TryCreateFromSource(Dictionary&lt;ShaderType, string&gt; subshaders, out ShaderProgram program)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>RenderTarget</Name>
        <Access>Public</Access>
        <Location left="29" top="504" />
        <Size width="162" height="400" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public RenderTargetMergeType MergeType { get; set; }</Member>
        <Member type="Property">public int PassMask { get; set; }</Member>
        <Member type="Property">public Color ClearColor { get; set; }</Member>
        <Member type="Property">public int FrameBuffer { get; }</Member>
        <Member type="Property">public int RenderedTexture { get; }</Member>
        <Member type="Property">public int DepthBuffer { get; }</Member>
        <Member type="Property">internal ICamera PassCamera { get; }</Member>
        <Member type="Property">public Rectangle ViewPort { get; set; }</Member>
        <Member type="Constructor">public RenderTarget(ICamera cam, int PassMask, Color ClearColor, bool noDepth = false)</Member>
        <Member type="Method">public void Dispose()</Member>
        <Member type="Method">public int CompareTo(RenderTarget other)</Member>
        <Member type="Method">public override int GetHashCode()</Member>
        <Member type="Method">public override bool Equals(object obj)</Member>
        <Member type="Method">public static bool operator ==(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator &gt;(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator &lt;(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator &gt;=(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator &lt;=(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator !=(RenderTarget left, RenderTarget right)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Renderer</Name>
        <Access>Public</Access>
        <Location left="40" top="104" />
        <Size width="162" height="315" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly List&lt;RenderTarget&gt; Targets = new List&lt;RenderTarget&gt;()</Member>
        <Member type="Field">internal static List&lt;LightComponent&gt; Lights = new List&lt;LightComponent&gt;()</Member>
        <Member type="Field">private Color _clearColor = new Color(0, 0, 0, 0)</Member>
        <Member type="Field">private RenderTarget rt</Member>
        <Member type="Field">private RenderTarget rt1</Member>
        <Member type="Constructor">internal Renderer()</Member>
        <Member type="Method">public void AddRenderTarget(RenderTarget target)</Member>
        <Member type="Method">public void RemoveRenderTarget(RenderTarget target)</Member>
        <Member type="Method">private static List&lt;RenderContext&gt; CreateRenderQueue(int renderTarget, Matrix4 view, RenderType type)</Member>
        <Member type="Method">public void RenderAllTargets(AbstractScene scene)</Member>
        <Member type="Method">public static void Render(List&lt;RenderContext&gt; contexts, Matrix4 viewM, ICamera cam)</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Member type="Property">private int CurrentTarget { get; set; }</Member>
        <Member type="Property">public Color ClearColor { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>ICamera</Name>
        <Access>Public</Access>
        <Location left="926" top="30" />
        <Size width="209" height="118" />
        <Collapsed>False</Collapsed>
        <Member type="Property">Matrix4 Projection { get; }</Member>
        <Member type="Property">Matrix4 ViewMatrix { get; }</Member>
        <Member type="Method">Matrix4 GetWorldTransform()</Member>
      </Entity>
      <Entity type="Class">
        <Name>RendererContext</Name>
        <Access>Public</Access>
        <Location left="429" top="181" />
        <Size width="436" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">protected RendererContext(ShaderProgram program, Matrix4 modelMatrix, bool worldSpace, Renderer.RenderType renderType, int renderQueue)</Member>
        <Member type="Method">public abstract void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Method">public int CompareTo(RenderContext other)</Member>
        <Member type="Method">private int CmpTo(RenderContext other)</Member>
        <Member type="Property">public ShaderProgram Program { get; set; }</Member>
        <Member type="Property">public int RenderQueue { get; set; }</Member>
        <Member type="Property">public Matrix4 ModelMat { get; set; }</Member>
        <Member type="Property">public Matrix4 MV { get; private set; }</Member>
        <Member type="Property">public Vector3 MVPosition { get; private set; }</Member>
        <Member type="Property">public Renderer.RenderType RenderType { get; set; }</Member>
        <Member type="Property">public bool WorldSpace { get; set; }</Member>
        <Member type="Method">public void PrecalculateMV(Matrix4 view)</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>MeshRendererContext</Name>
        <Access>Public</Access>
        <Location left="553" top="562" />
        <Size width="162" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Field">protected bool _init = false</Member>
        <Member type="Method">public override void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Property">public Mesh[] Meshes { get; set; }</Member>
        <Member type="Property">public Texture[] Textures { get; set; }</Member>
        <Member type="Property">public Vector2 Tiling { get; set; }</Member>
        <Member type="Property">public Vector2 Offset { get; set; }</Member>
        <Member type="Constructor">public MeshRendererContext(ShaderProgram program, Matrix4 modelMatrix, Mesh[] meshes, Texture[] textures, Renderer.RenderType renderType, Vector2 offset, Vector2 tiling)</Member>
        <Member type="Method">private void Init()</Member>
        <Member type="Method">protected void RenderMeshes()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>IRendererComponent</Name>
        <Access>Public</Access>
        <Location left="1172" top="30" />
        <Size width="197" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public RenderContext Context { get; }</Member>
        <Member type="Property">public int RenderMask { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="2" second="1">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Generalization" first="5" second="4">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine.UI</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>FontLibrary</Name>
        <Access>Public</Access>
        <Location left="1087" top="46" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly Dictionary&lt;string, Tuple&lt;string, GameFont&gt;&gt; _fonts</Member>
        <Member type="Method">public void LoadFont(string filename)</Member>
        <Member type="Constructor">public FontLibrary(string folderPath)</Member>
        <Member type="Method">public void LoadFont(string filename, int pixelSize)</Member>
        <Member type="Method">internal static GameFont LoadFontInternal(Stream fileStream, int pixelSize, out string fontName)</Member>
        <Member type="Method">private void LoadFont(Stream fileStream, int pixelSize, string path)</Member>
        <Member type="Method">public GameFont GetFont(string name)</Member>
        <Member type="Method">public GameFont GetFontByPath(string path)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>RendererContext_From_Engine_Rendering</Name>
        <Access>Public</Access>
        <Location left="507" top="30" />
        <Size width="436" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">protected RendererContext_From_Engine_Rendering(ShaderProgram program, Matrix4 modelMatrix, bool worldSpace, Renderer.RenderType renderType, int renderQueue)</Member>
        <Member type="Method">public abstract void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Method">public int CompareTo(RenderContext other)</Member>
        <Member type="Method">private int CmpTo(RenderContext other)</Member>
        <Member type="Property">public ShaderProgram Program { get; set; }</Member>
        <Member type="Property">public int RenderQueue { get; set; }</Member>
        <Member type="Property">public Matrix4 ModelMat { get; set; }</Member>
        <Member type="Property">public Matrix4 MV { get; private set; }</Member>
        <Member type="Property">public Vector3 MVPosition { get; private set; }</Member>
        <Member type="Property">public Renderer.RenderType RenderType { get; set; }</Member>
        <Member type="Property">public bool WorldSpace { get; set; }</Member>
        <Member type="Method">public void PrecalculateMV(Matrix4 view)</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>UIRendererContext</Name>
        <Access>Public</Access>
        <Location left="507" top="371" />
        <Size width="436" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Vector2 Scale { get; set; }</Member>
        <Member type="Property">public Vector2 Position { get; set; }</Member>
        <Member type="Property">public float Alpha { get; set; }</Member>
        <Member type="Constructor">protected UIRendererContext(Vector2 position, Vector2 scale, Matrix4 modelMatrix, bool worldSpace, float alpha, ShaderProgram program, int renderQueue)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextRendererContext</Name>
        <Access>Public</Access>
        <Location left="745" top="606" />
        <Size width="162" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Field">protected static int _vao</Member>
        <Member type="Field">protected static int _vbo</Member>
        <Member type="Field">protected static bool _init</Member>
        <Member type="Field">private bool cached</Member>
        <Member type="Field">private static float TabToSpaceCount = 0.1f</Member>
        <Member type="Constructor">public TextRendererContext(ShaderProgram program, Vector2 position, Vector2 scale, Matrix4 modelMatrix, bool worldSpace, float alpha, GameFont fontFace, string displayText, int renderQueue)</Member>
        <Member type="Method">private static void SetUpTextResources()</Member>
        <Member type="Method">public override void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Property">public string DisplayText { get; set; }</Member>
        <Member type="Property">public GameFont FontFace { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>UIImageRenderContext</Name>
        <Access>Public</Access>
        <Location left="491" top="606" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static float[] _screenQuadVertexData</Member>
        <Member type="Field">private bool _init</Member>
        <Member type="Field">private int _vao</Member>
        <Member type="Constructor">public UIImageRenderContext(Vector2 position, Vector2 scale, Matrix4 modelMatrix, Texture tex, bool worldSpace, float alpha, ShaderProgram program, int renderQueue)</Member>
        <Member type="Method">private void SetUpGLBuffers()</Member>
        <Member type="Method">public override void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Property">public Texture Texture { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="2" second="1">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="4" second="2">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="3" second="2">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Engine*</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>TextProcessorAPI</Name>
        <Access>Public</Access>
        <Location left="518" top="580" />
        <Size width="554" height="213" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Dictionary&lt;string, APreProcessorConfig&gt; _configs = new Dictionary&lt;string, APreProcessorConfig&gt;</Member>
        <Member type="Method">public static string[] GenericIncludeToSource(string ext, string file, params string[] genType)</Member>
        <Member type="Method">public static string[] PreprocessLines(string filename, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">public static string[] PreprocessLines(string[] lines, string incDir, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">internal static string[] PreprocessLines(IFileContent file, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">public static string PreprocessSource(string filename, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">public static string PreprocessSource(string[] lines, string incDir, Dictionary&lt;string, bool&gt; defs)</Member>
        <Member type="Method">internal static string PreprocessSource(IFileContent filename, Dictionary&lt;string, bool&gt; defs)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FileContent</Name>
        <Access>Public</Access>
        <Location left="1064" top="38" />
        <Size width="162" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly string _incDir</Member>
        <Member type="Field">private readonly string[] _lines</Member>
        <Member type="Field">public bool HasValidFilepath = &gt; false</Member>
        <Member type="Field">private string Key = &gt; _incDir + "/memoryFile"</Member>
        <Member type="Field">private string Path = &gt; _incDir + "/memoryFile"</Member>
        <Member type="Constructor">public FileContent(string[] lines, string incDir)</Member>
        <Member type="Method">public bool TryGetLines(out string[] lines)</Member>
        <Member type="Method">public string GetKey()</Member>
        <Member type="Method">public void SetKey(string key)</Member>
        <Member type="Method">public string GetFilePath()</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextProcessingException</Name>
        <Access>Public</Access>
        <Location left="46" top="909" />
        <Size width="422" height="99" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public TextProcessingException(string errorMessage, ApplicationException inner)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLPreProcessorConfig</Name>
        <Access>Public</Access>
        <Location left="696" top="335" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public override Verbosity VerbosityLevel { get; }</Member>
        <Member type="Property">public override List&lt;AbstractPlugin&gt; Plugins { get; }</Member>
        <Member type="Method">public override string GetGenericInclude(string filename, string[] gentype)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GLCLPreProcessorConfig</Name>
        <Access>Public</Access>
        <Location left="518" top="335" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public override Verbosity VerbosityLevel { get; }</Member>
        <Member type="Property">public override List&lt;AbstractPlugin&gt; Plugins { get; }</Member>
        <Member type="Method">public override string GetGenericInclude(string filename, string[] gentype)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>DefaultPreProcessorConfig</Name>
        <Access>Public</Access>
        <Location left="869" top="335" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public override Verbosity VerbosityLevel { get; }</Member>
        <Member type="Property">public override List&lt;AbstractPlugin&gt; Plugins { get; }</Member>
        <Member type="Method">public override string GetGenericInclude(string filename, string[] gentype)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>APreProcessorConfig</Name>
        <Access>Public</Access>
        <Location left="518" top="38" />
        <Size width="516" height="199" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public abstract Verbosity VerbosityLevel { get; }</Member>
        <Member type="Property">public abstract List&lt;AbstractPlugin&gt; Plugins { get; }</Member>
        <Member type="Method">public abstract string GetGenericInclude(string filename, string[] gentype)</Member>
        <Member type="Method">public string[] Preprocess(IFileContent filename, Dictionary&lt;string, bool&gt; defs)</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IDebugSettings</Name>
        <Access>Public</Access>
        <Location left="46" top="292" />
        <Size width="404" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">bool Enabled { get; set; }</Member>
        <Member type="Property">bool SendInterrnalWarnings { get; set; }</Member>
        <Member type="Property">bool SearchForUpdates { get; set; }</Member>
        <Member type="Property">int InternalUpdateMask { get; set; }</Member>
        <Member type="Property">int PrefixLookupFlags { get; set; }</Member>
        <Member type="Property">int SeverityFilter { get; set; }</Member>
        <Member type="Property">string[] StageNames { get; set; }</Member>
        <Member type="Property">ILogStreamSettings[] Streams { get; set; }</Member>
      </Entity>
      <Entity type="Interface">
        <Name>ILogStreamSettings</Name>
        <Access>Public</Access>
        <Location left="33" top="622" />
        <Size width="419" height="226" />
        <Collapsed>False</Collapsed>
        <Member type="Method">void NewMethod()</Member>
        <Member type="Property">int StreamType { get; set; }</Member>
        <Member type="Property">string Destination { get; set; }</Member>
        <Member type="Property">int Mask { get; set; }</Member>
        <Member type="Property">int MatchMode { get; set; }</Member>
        <Member type="Property">bool TimeStamp { get; set; }</Member>
        <Member type="Property">int NetworkPort { get; set; }</Member>
        <Member type="Property">int NetworkAppID { get; set; }</Member>
        <Member type="Property">Version NetworkAuthVersion { get; set; }</Member>
      </Entity>
      <Entity type="Class">
        <Name>DebugHelper</Name>
        <Access>Public</Access>
        <Location left="68" top="38" />
        <Size width="401" height="231" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public static int SevertiyFilter</Member>
        <Member type="Field">public static bool ThrowAllExceptions</Member>
        <Member type="Method">public static void ApplySettings(IDebugSettings settings)</Member>
        <Member type="Method">private static LogStream OpenFileStream(ILogStreamSettings settings)</Member>
        <Member type="Method">private static LogStream OpenConsoleStream(ILogStreamSettings settings)</Member>
        <Member type="Method">private static LogStream OpenNetworkStream(ILogStreamSettings settings)</Member>
        <Member type="Method">private static LogStream OpenStream(ILogStreamSettings settings)</Member>
        <Member type="Method">public static void Crash(Exception ex, bool recoverable)</Member>
        <Member type="Method">public static void Log(string message, int channel, int severity = 0)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameObject</Name>
        <Access>Public</Access>
        <Location left="1158" top="428" />
        <Size width="458" height="1369" />
        <Collapsed>False</Collapsed>
        <Member type="Field">internal static List&lt;GameObject&gt; ObjsWithAttachedRenderers = new List&lt;GameObject&gt;()</Member>
        <Member type="Field">private static Dictionary&lt;Collidable, Collider&gt; ObjsWithAttachedColliders = new Dictionary&lt;Collidable, Collider&gt;()</Member>
        <Member type="Field">internal Matrix4 _worldTransformCache</Member>
        <Member type="Field">private bool transformChanged = true</Member>
        <Member type="Field">private Matrix4 _transform = Matrix4.Identity</Member>
        <Member type="Field">private static int _objId</Member>
        <Member type="Field">private readonly Dictionary&lt;Type, AbstractComponent&gt; _components = new Dictionary&lt;Type, AbstractComponent&gt;()</Member>
        <Member type="Field">private readonly List&lt;GameObject&gt; _children = new List&lt;GameObject&gt;()</Member>
        <Member type="Field">private bool _destructionPending</Member>
        <Member type="Field">private bool _hasRendererInHierarchy</Member>
        <Member type="Field">private Physics.BEPUutilities.Vector3 _localPosition</Member>
        <Member type="Field">private Physics.BEPUutilities.Vector3 _scale = new Physics.BEPUutilities.Vector3(1f, 1f, 1f)</Member>
        <Member type="Field">private Physics.BEPUutilities.Quaternion _rotation = Quaternion.Identity</Member>
        <Member type="Property">public Engine.Physics.BEPUutilities.Vector4 AxisAngle { get; set; }</Member>
        <Member type="Destructor">~GameObject()</Member>
        <Member type="Method">public void Destroy()</Member>
        <Member type="Method">internal void _Destroy()</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Member type="Constructor">public GameObject(Vector3 localPosition, string name, GameObject parent)</Member>
        <Member type="Constructor">public GameObject(Vector3 localPosition, string name)</Member>
        <Member type="Constructor">public GameObject(string name)</Member>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Method">private static void addObjCount()</Member>
        <Member type="Method">public void AddComponent(AbstractComponent component)</Member>
        <Member type="Method">internal void RemoveDestroyedObjects()</Member>
        <Member type="Method">private void RemoveFromRenderLoop()</Member>
        <Member type="Method">public void RemoveComponent(Type componentType)</Member>
        <Member type="Method">public void RemoveComponent&lt;T&gt;()</Member>
        <Member type="Method">public T GetComponentIterative&lt;T&gt;()</Member>
        <Member type="Method">public T GetComponent&lt;T&gt;()</Member>
        <Member type="Method">public void ComputeWorldTransformCache(Matrix4 parentTransform)</Member>
        <Member type="Method">private void innerRemove(GameObject child)</Member>
        <Member type="Method">private void applyRenderHierarchy(bool hasRenderer)</Member>
        <Member type="Method">private void applyRenderHierarchyFromBelow(bool hasRenderer)</Member>
        <Member type="Method">private void innerAdd(GameObject child)</Member>
        <Member type="Method">public void Add(GameObject child)</Member>
        <Member type="Method">public static void Remove(GameObject child)</Member>
        <Member type="Method">public void DestroyAllChildren()</Member>
        <Member type="Method">public void SetParent(GameObject newParent)</Member>
        <Member type="Method">internal void registerCollider(Collider coll)</Member>
        <Member type="Method">internal void unregisterCollider(Collider coll)</Member>
        <Member type="Method">private void Events_InitialCollisionDetected(EntityCollidable sender, Collidable other, CollidablePairHandler pair)</Member>
        <Member type="Method">private void Events_CollisionEnded(EntityCollidable sender, Collidable other, CollidablePairHandler pair)</Member>
        <Member type="Method">private void Events_ContactRemoved(EntityCollidable sender, Collidable other, CollidablePairHandler pair, ContactData contact)</Member>
        <Member type="Method">private void Events_ContactCreated(EntityCollidable sender, Collidable other, CollidablePairHandler pair, ContactData contact)</Member>
        <Member type="Method">private void OnKeyPress(object sender, KeyPressEventArgs e)</Member>
        <Member type="Method">private void OnKeyUp(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">private void OnKeyDown(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">public void Update(float deltaTime)</Member>
        <Member type="Method">private void setSceneRecursively(AbstractScene newScene)</Member>
        <Member type="Method">public GameObject GetChildAt(int idx)</Member>
        <Member type="Method">public GameObject GetChildWithName(string name)</Member>
        <Member type="Method">public void Translate(Vector3 translation)</Member>
        <Member type="Method">public void ScaleBy(Vector3 scaleAmount)</Member>
        <Member type="Method">public Vector3 GetScale()</Member>
        <Member type="Method">public void Rotate(Vector3 axis, float angle)</Member>
        <Member type="Method">public void SetRotation(Quaternion rot)</Member>
        <Member type="Method">public Vector3 GetWorldPosition()</Member>
        <Member type="Method">public Matrix4 GetWorldTransform()</Member>
        <Member type="Method">public Vector3 GetLocalPosition()</Member>
        <Member type="Method">public Quaternion GetOrientation()</Member>
        <Member type="Method">public void SetLocalPosition(Vector3 pos)</Member>
        <Member type="Method">public void LookAt(GameObject other)</Member>
        <Member type="Method">public void LookAt(Vector3 worldPos)</Member>
        <Member type="Property">public IRenderingComponent RenderingComponent { get; private set; }</Member>
        <Member type="Property">public Matrix4 Transform { get; }</Member>
        <Member type="Property">public Engine.Physics.BEPUutilities.Vector3 LocalPosition { get; set; }</Member>
        <Member type="Property">public Engine.Physics.BEPUutilities.Vector3 Scale { get; set; }</Member>
        <Member type="Property">public Engine.Physics.BEPUutilities.Quaternion Rotation { get; set; }</Member>
        <Member type="Property">public AbstractScene Scene { get; internal set; }</Member>
        <Member type="Method">internal static void _KeyDown(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">internal static void _KeyUp(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">internal static void _KeyPress(object sender, KeyPressEventArgs e)</Member>
        <Member type="Property">public bool Destroyed { get; private set; }</Member>
        <Member type="Property">public GameObject Parent { get; private set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>IDestroyable</Name>
        <Access>Public</Access>
        <Location left="1417" top="49" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void Destroy()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>EngineSettings</Name>
        <Access>Public</Access>
        <Location left="521" top="1429" />
        <Size width="261" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int Depth { get; set; }</Member>
        <Member type="Property">public int Stencil { get; set; }</Member>
        <Member type="Property">public int Samples { get; set; }</Member>
        <Member type="Property">public int InitWidth { get; set; }</Member>
        <Member type="Property">public int InitHeight { get; set; }</Member>
        <Member type="Property">public int PhysicsThreadCount { get; set; }</Member>
        <Member type="Property">public string Title { get; set; }</Member>
        <Member type="Property">public VSyncMode VSync { get; set; }</Member>
        <Member type="Property">public GameWindowFlags WindowFlags { get; set; }</Member>
        <Member type="Property">public DebugSettings DebugSettings { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>EngineConfig</Name>
        <Access>Public</Access>
        <Location left="521" top="1102" />
        <Size width="417" height="298" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private const string NamespaceMatch = @"xmlns(:\w+)?=""([^""]+)""|xsi(:\w+)?=""([^""]+)"""</Member>
        <Member type="Method">private static List&lt;Tuple&lt;string, string&gt;&gt; CreateConfigObjects(Assembly asm, string nameSpace, XmlWriterSettings settings)</Member>
        <Member type="Method">private static List&lt;Tuple&lt;string, string&gt;&gt; CreateConfigObjects(object obj, XmlWriterSettings settings)</Member>
        <Member type="Method">private static object GetValue(MemberInfo info, object reference)</Member>
        <Member type="Method">private static void SetValue(MemberInfo info, object reference, object value)</Member>
        <Member type="Method">private static Type GetMemberType(MemberInfo info)</Member>
        <Member type="Method">private static Tuple&lt;string, MemberInfo&gt;[] GetPropertiesWithAttribute(Type t, BindingFlags flags)</Member>
        <Member type="Method">public static void LoadConfig(string configName, ref object obj)</Member>
        <Member type="Method">private static Tuple&lt;string, MemberInfo&gt;[] GetPropertiesWithAttribute&lt;T&gt;(Assembly asm, string nameSpace)</Member>
        <Member type="Method">private static Tuple&lt;string, MemberInfo&gt;[] GetPropertiesWithAttribute(Type t, BindingFlags flags)</Member>
        <Member type="Method">public static void LoadConfig(string configName, Assembly asm, string nameSpace)</Member>
        <Member type="Method">private static XmlNode GetObject(XmlDocument doc, string fullname)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameEngine</Name>
        <Access>Public</Access>
        <Location left="46" top="1611" />
        <Size width="427" height="579" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private GameWindow Window</Member>
        <Member type="Field">protected Renderer Renderer</Member>
        <Member type="Field">private bool _changeScene</Member>
        <Member type="Field">private Type _nextScene</Member>
        <Member type="Field">private int FrameCounter</Member>
        <Member type="Field">private int RenderFrameCounter</Member>
        <Member type="Field">int newField</Member>
        <Member type="Property">private DebugSettings EngineDefault { get; }</Member>
        <Member type="Property">public EngineSettings Settings { get; }</Member>
        <Member type="Constructor">public GameEngine(EngineSettings settings)</Member>
        <Member type="Property">public static GameEngine Instance { get; private set; }</Member>
        <Member type="Method">public void Initialize()</Member>
        <Member type="Method">private void initializeWindow()</Member>
        <Member type="Method">private void initializeRenderer()</Member>
        <Member type="Method">private void Window_MouseMove(object sender, OpenTK.Input.MouseMoveEventArgs e)</Member>
        <Member type="Method">public void InitializeScene&lt;T&gt;()</Member>
        <Member type="Method">public void AddRenderTarget(RenderTarget target)</Member>
        <Member type="Method">public void RemoveRenderTarget(RenderTarget target)</Member>
        <Member type="Method">public void Run()</Member>
        <Member type="Method">public Vector3 ConvertScreenToWorldCoords(int x, int y)</Member>
        <Member type="Property">public Vector2 MousePosition { get; private set; }</Member>
        <Member type="Method">private static Vector4 UnProject(ref Matrix4 projection, Matrix4 view, Size viewport, Vector2 mouse)</Member>
        <Member type="Method">protected virtual void Update(object sender, FrameEventArgs e)</Member>
        <Member type="Method">private void OnResize(object o, EventArgs e)</Member>
        <Member type="Property">public AbstractScene CurrentScene { get; private set; }</Member>
        <Member type="Property">public int Width { get; }</Member>
        <Member type="Property">public int Height { get; }</Member>
        <Member type="Property">public float AspectRatio { get; }</Member>
        <Member type="Method">private void OnRender(object o, EventArgs e)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Interpolations</Name>
        <Access>Public</Access>
        <Location left="46" top="1102" />
        <Size width="418" height="434" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static float FakePow(float basis, float exp)</Member>
        <Member type="Method">public static float IntPow(float basis, int exp)</Member>
        <Member type="Method">public static float InverseLerp(float min, float max, float value)</Member>
        <Member type="Method">public static float Slerp(float t)</Member>
        <Member type="Method">public static float Flip(float t)</Member>
        <Member type="Method">public static float Scale(float t, float scale)</Member>
        <Member type="Method">public static float Mix(float a, float b, float weightB)</Member>
        <Member type="Method">public static float SmoothStart(float t, int smoothness = 1)</Member>
        <Member type="Method">public static float SmoothStart(float t, float smoothness = 1)</Member>
        <Member type="Method">public static float SmoothStop(float t, int smoothness = 1)</Member>
        <Member type="Method">public static float SmoothStop(float t, float smoothness = 1)</Member>
        <Member type="Method">public static float SmoothStep(float t, float smoothnessStart = 1, float smoothnessStop = 1)</Member>
        <Member type="Method">public static float Arch2(float t)</Member>
        <Member type="Method">public static float SmoothStopArch3(float t)</Member>
        <Member type="Method">public static float SmoothStartArch3(float t)</Member>
        <Member type="Method">public static float SmoothStepArch4(float t)</Member>
        <Member type="Method">public static float BellCurve(float t, float smoothness = 1)</Member>
        <Member type="Method">public static float NormalizedBezier(float B, float C, float t)</Member>
        <Member type="Method">public static Vector3[] Chaikin(Vector3[] pts, int smoothness)</Member>
        <Member type="Method">public static Vector3[] Chaikin(Vector3[] pts)</Member>
        <Member type="Method">public static List&lt;Vector3&gt; SmoothLine(List&lt;Vector3&gt; cornerPoints, float smoothness)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AbstractComponent</Name>
        <Access>Public</Access>
        <Location left="1891" top="428" />
        <Size width="509" height="502" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private bool _awake</Member>
        <Member type="Field">internal bool _destructionPending</Member>
        <Member type="Property">public bool Destroyed { get; private set; }</Member>
        <Member type="Method">protected virtual void Awake()</Member>
        <Member type="Method">internal void _Destroy()</Member>
        <Member type="Method">protected virtual void OnDestroy()</Member>
        <Member type="Method">protected virtual void OnKeyPress(object sender, KeyPressEventArgs e)</Member>
        <Member type="Method">protected virtual void OnKeyDown(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">protected virtual void OnKeyUp(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">internal void onPress(object sender, KeyPressEventArgs e)</Member>
        <Member type="Method">internal void onKeyDown(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">internal void onKeyUp(object sender, KeyboardKeyEventArgs e)</Member>
        <Member type="Method">protected virtual void Update(float deltaTime)</Member>
        <Member type="Method">internal void updateObject(float deltaTime)</Member>
        <Member type="Method">protected virtual void OnInitialCollisionDetected(Collider other, CollidablePairHandler handler)</Member>
        <Member type="Method">protected virtual void OnCollisionEnded(Collider other, CollidablePairHandler handler)</Member>
        <Member type="Method">protected virtual void OnContactRemoved(Collider other, CollidablePairHandler handler, ContactData contact)</Member>
        <Member type="Method">protected virtual void OnContactCreated(Collider other, CollidablePairHandler handler, ContactData contact)</Member>
        <Member type="Method">internal void onInitialCollisionDetected(Collider other, CollidablePairHandler handler)</Member>
        <Member type="Method">internal void onCollisionEnded(Collider other, CollidablePairHandler handler)</Member>
        <Member type="Method">internal void onContactRemoved(Collider other, CollidablePairHandler handler, ContactData contact)</Member>
        <Member type="Method">internal void onContactCreated(Collider other, CollidablePairHandler handler, ContactData contact)</Member>
        <Member type="Property">public GameObject Owner { get; set; }</Member>
        <Member type="Method">public void Destroy()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AbstractScene</Name>
        <Access>Public</Access>
        <Location left="1681" top="428" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public BasicCamera Camera { get; private set; }</Member>
        <Member type="Method">public void SetCamera(BasicCamera c)</Member>
        <Member type="Method">internal void _initializeScene()</Member>
        <Member type="Method">public void DestroyScene()</Member>
        <Member type="Method">protected abstract void InitializeScene()</Member>
        <Member type="Method">public virtual void OnDestroy()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameFont</Name>
        <Access>Public</Access>
        <Location left="931" top="2027" />
        <Size width="162" height="264" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly Dictionary&lt;char, TextCharacter&gt; _fontAtlas</Member>
        <Member type="Field">private readonly FontFace _fontFace</Member>
        <Member type="Field">private static GameFont _defaultFont</Member>
        <Member type="Property">public int Size { get; }</Member>
        <Member type="Property">public FaceMetrics Metrics { get; }</Member>
        <Member type="Method">public void Dispose()</Member>
        <Member type="Method">public bool TryGetCharacter(char character, out TextCharacter charInfo)</Member>
        <Member type="Constructor">internal GameFont(FontFace ff, int size, Dictionary&lt;char, TextCharacter&gt; fontAtlas)</Member>
        <Member type="Property">public static GameFont DefaultFont { get; }</Member>
        <Member type="Method">private static GameFont GetDefaultFont()</Member>
        <Member type="Property">public string Name { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Mesh</Name>
        <Access>Public</Access>
        <Location left="521" top="2027" />
        <Size width="162" height="298" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Mesh _defaultMesh</Member>
        <Member type="Field">public readonly int _ebo</Member>
        <Member type="Field">public readonly int _vbo</Member>
        <Member type="Field">public readonly int _vao</Member>
        <Member type="Field">private bool _disposed</Member>
        <Member type="Field">private bool _dontDispose</Member>
        <Member type="Field">public readonly int DrawCount</Member>
        <Member type="Constructor">internal Mesh(int ebo, int vbo, int vao, int drawCount)</Member>
        <Member type="Method">public Mesh Copy()</Member>
        <Member type="Method">public void Dispose()</Member>
        <Member type="Method">private static Mesh GetDefaultMesh()</Member>
        <Member type="Property">public static Mesh DefaultMesh { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Texture</Name>
        <Access>Public</Access>
        <Location left="727" top="2027" />
        <Size width="162" height="264" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Texture _defaultTexture</Member>
        <Member type="Field">private bool _disposed</Member>
        <Member type="Field">private bool _dontDispose</Member>
        <Member type="Property">public static Texture DefaultTexture { get; }</Member>
        <Member type="Property">public TextureType TexType { get; set; }</Member>
        <Member type="Property">public int TextureId { get; }</Member>
        <Member type="Property">public float Width { get; }</Member>
        <Member type="Property">public float Height { get; }</Member>
        <Member type="Constructor">internal Texture(int textureId)</Member>
        <Member type="Method">public Texture Copy()</Member>
        <Member type="Method">public void Dispose()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextCharacter</Name>
        <Access>Public</Access>
        <Location left="931" top="1722" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Texture GlTexture { get; set; }</Member>
        <Member type="Property">public int Width { get; set; }</Member>
        <Member type="Property">public int Height { get; set; }</Member>
        <Member type="Property">public float BearingX { get; set; }</Member>
        <Member type="Property">public float BearingY { get; set; }</Member>
        <Member type="Property">public float Advance { get; set; }</Member>
        <Member type="Method">public void Dispose()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Vertex</Name>
        <Access>Public</Access>
        <Location left="521" top="1722" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public Vector3 Position</Member>
        <Member type="Field">public Vector3 Normal</Member>
        <Member type="Field">public Vector2 UV</Member>
        <Member type="Field">public Vector3 Tangent</Member>
        <Member type="Field">public Vector3 Bittangent</Member>
        <Member type="Field">public static readonly int VERTEX_BYTE_SIZE = sizeof(float) * 14</Member>
        <Member type="Method">public bool Equals(Vertex other)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioFile</Name>
        <Access>Public</Access>
        <Location left="727" top="1722" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int Buffer { get; }</Member>
        <Member type="Property">public int BufferSize { get; }</Member>
        <Member type="Constructor">internal AudioFile(int buffer, int bufferSize)</Member>
        <Member type="Method">public void Dispose()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>MeshLoader</Name>
        <Access>Public</Access>
        <Location left="1710" top="1141" />
        <Size width="492" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static Mesh FileToMesh(string filename)</Member>
        <Member type="Method">public static Mesh[] FileToMeshes(string filename)</Member>
        <Member type="Method">internal static List&lt;Mesh&gt; LoadModel(Stream stream)</Member>
        <Member type="Method">private static List&lt;Mesh&gt; LoadModel(string path)</Member>
        <Member type="Method">private static List&lt;Mesh&gt; LoadAssimpScene(Scene s, string path)</Member>
        <Member type="Method">private static void processNode(Node node, Scene s, List&lt;Mesh&gt; meshes, string dir)</Member>
        <Member type="Method">private static Mesh processMesh(AssimpMesh mesh, Scene s, string dir)</Member>
        <Member type="Method">private static IntPtr offsetOf(string name)</Member>
        <Member type="Method">private static void setupMesh(uint[] indices, Vertex[] vertices, out int vao, out int vbo, out int ebo)</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Prefabs</Name>
        <Access>Public</Access>
        <Location left="541" top="836" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Texture _white</Member>
        <Member type="Field">private static Texture _black</Member>
        <Member type="Field">private static Mesh _cube = null</Member>
        <Member type="Field">private static Mesh _sphere = null</Member>
        <Member type="Property">public static Mesh Cube { get; }</Member>
        <Member type="Property">public static Mesh Sphere { get; }</Member>
        <Member type="Property">public static Texture White { get; }</Member>
        <Member type="Property">public static Texture Black { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IAudioFormatLoader</Name>
        <Access>Public</Access>
        <Location left="1710" top="1780" />
        <Size width="492" height="78" />
        <Collapsed>False</Collapsed>
        <Member type="Method">bool TryLoadFile(string file, out byte[] data, out int channel, out int bits, out int bitRate)</Member>
      </Entity>
      <Entity type="Class">
        <Name>TextureLoader</Name>
        <Access>Public</Access>
        <Location left="1710" top="1411" />
        <Size width="492" height="351" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static Texture BytesToTexture(IntPtr ptr, int width, int height)</Member>
        <Member type="Method">public static Texture BytesToTexture(byte[] buffer, int width, int height)</Member>
        <Member type="Method">public static Texture ParameterToTexture(int width, int height)</Member>
        <Member type="Method">private static byte[] TextureToByteArray(Texture tex)</Member>
        <Member type="Method">public static MemoryBuffer TextureToMemoryBuffer(Texture tex)</Member>
        <Member type="Method">public static void Update(Texture tex, byte[] data, int width, int height)</Member>
        <Member type="Method">public static byte[] BitmapToBytes(Bitmap bmp)</Member>
        <Member type="Method">public static Texture BitmapToTexture(Bitmap bmp)</Member>
        <Member type="Method">private static Texture[] AssimpSceneToTextures(Scene scene)</Member>
        <Member type="Method">private static byte[] flattenImageData(Texel[] imageData)</Member>
        <Member type="Method">private static void TexelToByteSequence(int startidx, byte[] arr, Texel txl)</Member>
        <Member type="Method">public static Texture AssimpEmbeddedToTexture(EmbeddedTexture tex)</Member>
        <Member type="Method">public static Texture FileToTexture(string file)</Member>
        <Member type="Method">private static void DefaultTexParameter()</Member>
        <Member type="Method">private static Texture Copy(Texture other)</Member>
        <Member type="Method">internal static List&lt;Texture&gt; LoadMaterialTextures(Material m, TextureType texType, string dir)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioLoader</Name>
        <Access>Public</Access>
        <Location left="1710" top="981" />
        <Size width="492" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Dictionary&lt;string, Type&gt; _formats = new Dictionary&lt;string, Type&gt;()</Member>
        <Member type="Method">private static bool TryGetFormatProvider(string filename, out IAudioFormatLoader formatProvider)</Member>
        <Member type="Method">private static ALFormat GetSoundFormat(int channels, int bits)</Member>
        <Member type="Method">public static bool TryLoad(string filename, out AudioFile clip)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AbstractAudioSource</Name>
        <Access>Public</Access>
        <Location left="1185" top="1994" />
        <Size width="162" height="417" />
        <Collapsed>False</Collapsed>
        <Member type="Field">protected readonly int source</Member>
        <Member type="Field">private AudioFile _clip</Member>
        <Member type="Property">public AudioFile Clip { get; set; }</Member>
        <Member type="Property">public ALSourceState State { get; set; }</Member>
        <Member type="Property">public bool IsPlaying { get; }</Member>
        <Member type="Property">public float Pitch { get; set; }</Member>
        <Member type="Property">public float MaxDistance { get; set; }</Member>
        <Member type="Property">public float ReferenceDistance { get; set; }</Member>
        <Member type="Property">public float MaxGain { get; set; }</Member>
        <Member type="Property">public float MinGain { get; set; }</Member>
        <Member type="Property">public float Gain { get; set; }</Member>
        <Member type="Property">public float AirAbsorptionFactor { get; set; }</Member>
        <Member type="Property">public float RoomRollOffFactor { get; set; }</Member>
        <Member type="Property">public float RollOffFactor { get; set; }</Member>
        <Member type="Property">public float TrackPosition { get; set; }</Member>
        <Member type="Property">public bool Looping { get; set; }</Member>
        <Member type="Method">public void Play()</Member>
        <Member type="Method">public void Pause()</Member>
        <Member type="Method">public void Stop()</Member>
        <Member type="Constructor">protected AbstractAudioSource()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AbstractComponent</Name>
        <Access>Public</Access>
        <Location left="1185" top="1863" />
        <Size width="162" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioListener</Name>
        <Access>Public</Access>
        <Location left="1373" top="1994" />
        <Size width="197" height="95" />
        <Collapsed>False</Collapsed>
        <Member type="Method">protected override void Update(float deltaTime)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioManager</Name>
        <Access>Public</Access>
        <Location left="1373" top="2151" />
        <Size width="162" height="133" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static AudioContext _context</Member>
        <Member type="Method">public static void Initialize()</Member>
        <Member type="Property">public static AlcError GetCurrentALcError { get; }</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>BackgroundAudioSource</Name>
        <Access>Public</Access>
        <Location left="1287" top="2482" />
        <Size width="241" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AudioSourceComponent</Name>
        <Access>Public</Access>
        <Location left="960" top="2482" />
        <Size width="269" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public bool UpdatePosition { get; set; }</Member>
        <Member type="Method">protected override void OnDestroy()</Member>
        <Member type="Method">protected override void Update(float deltaTime)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>AbstractComponent</Name>
        <Access>Public</Access>
        <Location left="558" top="2368" />
        <Size width="162" height="77" />
        <Collapsed>False</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Collider</Name>
        <Access>Public</Access>
        <Location left="558" top="2549" />
        <Size width="300" height="334" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private bool _colliderRemoved</Member>
        <Member type="Constructor">public Collider(Entity shape, string layerName)</Member>
        <Member type="Constructor">public Collider(Entity shape, int layerID)</Member>
        <Member type="Destructor">~Collider()</Member>
        <Member type="Method">protected override void Awake()</Member>
        <Member type="Method">protected override void OnDestroy()</Member>
        <Member type="Method">public void SetVelocityLinear(Vector3 vel)</Member>
        <Member type="Method">public void SetVelocityAngular(Vector3 vel)</Member>
        <Member type="Method">private void enforceTranslationConstraints()</Member>
        <Member type="Method">private void enforceRotationConstraints()</Member>
        <Member type="Method">protected override void Update(float deltaTime)</Member>
        <Member type="Property">public Entity PhysicsCollider { get; }</Member>
        <Member type="Property">public ColliderConstraints ColliderConstraints { get; set; }</Member>
        <Member type="Property">public int CollisionLayer { get; set; }</Member>
        <Member type="Property">public bool IsTrigger { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Layer</Name>
        <Access>Public</Access>
        <Location left="302" top="2574" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public ushort SubgroupMembership { get; set; }</Member>
        <Member type="Property">public ushort CollidableSubgroups { get; set; }</Member>
        <Member type="Property">public int GroupId { get; set; }</Member>
        <Member type="Constructor">public Layer(int groupId)</Member>
        <Member type="Method">public void DisableCollision(int subgroupId)</Member>
        <Member type="Constructor">public Layer(int groupId, int subgroupId)</Member>
        <Member type="Method">public static void DisableCollision(ref Layer filterA, ref Layer filterB)</Member>
        <Member type="Method">public static bool AllowCollision(Layer a, Layer b)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>LayerManager</Name>
        <Access>Public</Access>
        <Location left="302" top="2249" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static List&lt;Tuple&lt;Layer, string&gt;&gt; _internalLayerStore = new List&lt;Tuple&lt;Layer, string&gt;&gt;()</Member>
        <Member type="Field">private static Dictionary&lt;string, int&gt; _registeredLayers = new Dictionary&lt;string, int&gt;()</Member>
        <Member type="Method">public static int RegisterLayer(string name, Layer layer)</Member>
        <Member type="Method">private static Layer IDToInternalLayer(int layer)</Member>
        <Member type="Method">public static int NameToLayer(string name)</Member>
        <Member type="Method">public static string LayerToName(int layer)</Member>
        <Member type="Method">public static void DisableCollisions(int layerA, int layerB)</Member>
        <Member type="Method">public static bool AllowCollision(int layerA, int layerB)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>PhysicsEngine</Name>
        <Access>Public</Access>
        <Location left="67" top="2249" />
        <Size width="162" height="298" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static Space _space</Member>
        <Member type="Field">private static ForceUpdater _fu</Member>
        <Member type="Property">public static TKVector3 Gravity { get; set; }</Member>
        <Member type="Method">public static void Initialize()</Member>
        <Member type="Method">public static Ray ConstructRayFromMousePosition(TKVector3 origin)</Member>
        <Member type="Method">public static bool RayCastAll(Ray ray, float maxLength, string layerInfo, out KeyValuePair&lt;Collider, RayHit&gt;[] collisions)</Member>
        <Member type="Method">public static bool RayCastAll(Ray ray, float maxLength, int layerInfo, out KeyValuePair&lt;Collider, RayHit&gt;[] collisions)</Member>
        <Member type="Method">public static bool RayCastFirst(Ray ray, float maxLength, string layerInfo, out KeyValuePair&lt;Collider, RayHit&gt; collision)</Member>
        <Member type="Method">public static bool RayCastFirst(Ray ray, float maxLength, int layerInfo, out KeyValuePair&lt;Collider, RayHit&gt; collision)</Member>
        <Member type="Method">private static bool FilterFunc(BroadPhaseEntry entry, int layerInfo)</Member>
        <Member type="Method">public static void AddEntity(Entity physicsCollider)</Member>
        <Member type="Method">public static void RemoveEntity(Entity physicsCollider)</Member>
        <Member type="Method">internal static void Update(float deltaTime)</Member>
        <Modifier>Static</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CLKernel</Name>
        <Access>Public</Access>
        <Location left="2413" top="1074" />
        <Size width="511" height="272" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Dictionary&lt;string, KernelParameter&gt; Parameter { get; }</Member>
        <Member type="Property">public string Name { get; }</Member>
        <Member type="Property">private Kernel Kernel { get; }</Member>
        <Member type="Constructor">public CLKernel(Kernel k, string name, KernelParameter[] parameter)</Member>
        <Member type="Method">public void SetBuffer(string parameterName, MemoryObject obj)</Member>
        <Member type="Method">public void SetArg(string parameterName, object value)</Member>
        <Member type="Method">public void SetBuffer(int index, MemoryObject obj)</Member>
        <Member type="Method">public void SetArg(int index, object value)</Member>
        <Member type="Method">internal void Run(CommandQueue cq, MemoryBuffer image, int3 dimensions, float genTypeMaxVal, MemoryBuffer enabledChannels, int channelCount)</Member>
        <Member type="Method">public void Run(CommandQueue cq, int workdim, int groupsize)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>KernelParameter</Name>
        <Access>Public</Access>
        <Location left="2428" top="1444" />
        <Size width="511" height="332" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static List&lt;Tuple&lt;string, float, TypeEnums.DataTypes&gt;&gt; DataTypePairs</Member>
        <Member type="Method">public object CastToType(object value)</Member>
        <Member type="Method">public static TypeEnums.DataTypes GetEnumFromType(Type t)</Member>
        <Member type="Method">public static object CastToType(Type t, object value)</Member>
        <Member type="Method">public static KernelParameter[] CreateKernelParametersFromKernelCode(string code, int startIndex, int endIndex)</Member>
        <Member type="Method">public static string GetDataString(TypeEnums.DataTypes type)</Member>
        <Member type="Method">public static float GetDataMaxSize(string genType)</Member>
        <Member type="Method">public static TypeEnums.DataTypes GetDataType(string str)</Member>
        <Member type="Method">private static MemoryScope GetMemoryScope(string modifier)</Member>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public TypeEnums.DataTypes DataType { get; set; }</Member>
        <Member type="Property">public bool IsArray { get; set; }</Member>
        <Member type="Property">public int Id { get; set; }</Member>
        <Member type="Property">public MemoryScope MemScope { get; set; }</Member>
        <Member type="Property">internal static Type[] Converters { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CLProgram</Name>
        <Access>Public</Access>
        <Location left="2445" top="739" />
        <Size width="325" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly string _filePath</Member>
        <Member type="Field">private readonly string _genType</Member>
        <Member type="Property">public Dictionary&lt;string, CLKernel&gt; ContainedKernels { get; }</Member>
        <Member type="Property">public Program ClProgramHandle { get; set; }</Member>
        <Member type="Constructor">public CLProgram(string FilePath, string genType)</Member>
        <Member type="Method">internal static int GetVectorNum(string dtStr)</Member>
        <Member type="Method">private void Initialize()</Member>
        <Member type="Method">private static string[] FindKernelNames(string source)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>KernelDatabase</Name>
        <Access>Public</Access>
        <Location left="2469" top="480" />
        <Size width="405" height="204" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly string _folderName</Member>
        <Member type="Field">public readonly Dictionary&lt;string, CLKernel&gt; LoadedKernels</Member>
        <Member type="Property">public string GenDataType { get; }</Member>
        <Member type="Constructor">public KernelDatabase(string folderName, TypeEnums.DataTypes genDataType)</Member>
        <Member type="Method">private void Initialize()</Member>
        <Member type="Method">public void AddProgram(string file)</Member>
        <Member type="Method">public bool TryGetCLKernel(string name, out CLKernel kernel)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CLAPI</Name>
        <Access>Public</Access>
        <Location left="1681" top="1948" />
        <Size width="828" height="502" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static CLAPI _instance</Member>
        <Member type="Field">private Context _context</Member>
        <Member type="Field">private CommandQueue _commandQueue</Member>
        <Member type="Method">internal static CommandQueue GetQueue()</Member>
        <Member type="Constructor">public CLAPI()</Member>
        <Member type="Method">public static void Reinitialize()</Member>
        <Member type="Method">private void InitializeOpenCL()</Member>
        <Member type="Method">internal static Program CreateCLProgramFromSource(string source)</Member>
        <Member type="Method">internal static Program CreateCLProgramFromSource(string[] source)</Member>
        <Member type="Method">internal static Kernel CreateKernelFromName(Program program, string name)</Member>
        <Member type="Method">public static MemoryBuffer CreateEmpty&lt;T&gt;(int size, MemoryFlag flags)</Member>
        <Member type="Method">public static MemoryBuffer CreateBuffer&lt;T&gt;(T[] data, MemoryFlag flags)</Member>
        <Member type="Method">public static MemoryBuffer CreateBuffer(object[] data, Type t, MemoryFlag flags)</Member>
        <Member type="Method">public static MemoryBuffer CreateFromImage(Bitmap bmp, MemoryFlag flags)</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Member type="Property">private static CLAPI Instance { get; }</Member>
        <Member type="Method">public static T[] CreateRandom&lt;T&gt;(int size, byte[] channelEnableState, RandomFunc&lt;T&gt; rnd, bool uniform)</Member>
        <Member type="Method">public static T[] CreateRandom&lt;T&gt;(int size, byte[] channelEnableState, RandomFunc&lt;T&gt; rnd)</Member>
        <Member type="Method">public static void WriteRandom&lt;T&gt;(T[] buffer, byte[] channelEnableState, RandomFunc&lt;T&gt; rnd, bool uniform)</Member>
        <Member type="Method">public static void WriteRandom&lt;T&gt;(T[] buffer, byte[] channelEnableState, RandomFunc&lt;T&gt; rnd)</Member>
        <Member type="Method">public static void WriteRandom&lt;T&gt;(MemoryBuffer buf, RandomFunc&lt;T&gt; rnd, byte[] enabledChannels, bool uniform)</Member>
        <Member type="Method">public static void WriteRandom&lt;T&gt;(MemoryBuffer buf, RandomFunc&lt;T&gt; rnd, byte[] enabledChannels)</Member>
        <Member type="Method">public static void WriteToBuffer&lt;T&gt;(MemoryBuffer buf, T[] values)</Member>
        <Member type="Method">public static T[] ReadBuffer&lt;T&gt;(MemoryBuffer buf, int size)</Member>
        <Member type="Method">public static void Run(CLKernel kernel, MemoryBuffer image, int3 dimensions, float genTypeMaxVal, MemoryBuffer enabledChannels, int channelCount)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>InterpreterStepResult</Name>
        <Access>Public</Access>
        <Location left="960" top="2707" />
        <Size width="291" height="267" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static StringBuilder _sb = new StringBuilder()</Member>
        <Member type="Property">public bool HasJumped { get; set; }</Member>
        <Member type="Property">public bool Terminated { get; set; }</Member>
        <Member type="Property">public bool TriggeredDebug { get; set; }</Member>
        <Member type="Property">public byte[] ActiveChannels { get; set; }</Member>
        <Member type="Property">public List&lt;string&gt; DefinedBuffers { get; set; }</Member>
        <Member type="Property">public List&lt;string&gt; BuffersInJumpStack { get; set; }</Member>
        <Member type="Property">public string DebugBufferName { get; set; }</Member>
        <Member type="Property">public string SourceLine { get; set; }</Member>
        <Member type="Method">public bool Equals(InterpreterStepResult other)</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLFunctionInfo</Name>
        <Access>Public</Access>
        <Location left="28" top="2622" />
        <Size width="233" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public readonly FlFunction Function</Member>
        <Member type="Field">public readonly bool LeaveStack</Member>
        <Member type="Constructor">public FLFunctionInfo(FlFunction flFunc, bool leaveStack)</Member>
        <Member type="Method">public void Run()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CLTypeConverter</Name>
        <Access>Public</Access>
        <Location left="48" top="2815" />
        <Size width="347" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Method">private static float ConvertRange(float value, float oldMax, float max)</Member>
        <Member type="Method">public static object Convert(Type newType, object value)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>InterpreterState</Name>
        <Access>Public</Access>
        <Location left="1274" top="3307" />
        <Size width="319" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public int Line { get; }</Member>
        <Member type="Property">public CLBufferInfo ActiveBuffer { get; }</Member>
        <Member type="Property">public Stack&lt;object&gt; ArgumentStack { get; }</Member>
        <Member type="Constructor">internal InterpreterState(int line, CLBufferInfo activeBuffer, Stack&lt;object&gt; argumentStack)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>CLBufferInfo</Name>
        <Access>Public</Access>
        <Location left="923" top="3132" />
        <Size width="255" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public MemoryBuffer Buffer</Member>
        <Member type="Property">public bool IsInternal { get; private set; }</Member>
        <Member type="Property">public string DefinedBufferName { get; private set; }</Member>
        <Member type="Constructor">internal CLBufferInfo(MemoryBuffer buffer, bool isInternal)</Member>
        <Member type="Method">internal void SetInternalState(bool internalState)</Member>
        <Member type="Method">internal void SetKey(string key)</Member>
        <Member type="Method">public override string ToString()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLArgumentData</Name>
        <Access>Public</Access>
        <Location left="588" top="3392" />
        <Size width="266" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public object value</Member>
        <Member type="Field">public FLArgumentType argType</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLInstructionData</Name>
        <Access>Public</Access>
        <Location left="588" top="3197" />
        <Size width="266" height="128" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public object Instruction</Member>
        <Member type="Field">public FLInstructionType InstructionType</Member>
        <Member type="Field">public List&lt;FLArgumentData&gt; Arguments</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FLScriptData</Name>
        <Access>Public</Access>
        <Location left="606" top="2950" />
        <Size width="266" height="162" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public List&lt;string&gt; Source</Member>
        <Member type="Field">public Dictionary&lt;string, CLBufferInfo&gt; Defines</Member>
        <Member type="Field">public Dictionary&lt;string, int&gt; JumpLocations</Member>
        <Member type="Field">public List&lt;FLInstructionData&gt; ParsedSource</Member>
        <Member type="Constructor">public FLScriptData(List&lt;string&gt; source)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Interpreter</Name>
        <Access>Public</Access>
        <Location left="28" top="2950" />
        <Size width="495" height="961" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private const string DefineKey = "--define texture "</Member>
        <Member type="Field">private const string ScriptDefineKey = "--define script "</Member>
        <Member type="Field">private const int FLHeaderArgCount = 5</Member>
        <Member type="Field">private const string CommentPrefix = "#"</Member>
        <Member type="Field">private const string EntrySignature = "Main"</Member>
        <Member type="Field">private const string InputBufferName = "in"</Member>
        <Member type="Field">private const string FunctionNamePostfix = ":"</Member>
        <Member type="Field">private const string WordSeparator = " "</Member>
        <Member type="Field">private const string FilepathIndicator = "\""</Member>
        <Member type="Field">private static readonly CultureInfo NumberParsingHelper = new CultureInfo(CultureInfo.InvariantCulture.LCID)</Member>
        <Member type="Field">private static readonly Random rnd = new Random()</Member>
        <Member type="Field">private readonly Dictionary&lt;string, FLFunctionInfo&gt; _flFunctions</Member>
        <Member type="Field">private KernelDatabase _kernelDb</Member>
        <Member type="Field">private int _currentIndex</Member>
        <Member type="Field">private int _currentWord</Member>
        <Member type="Field">private Stack&lt;object&gt; _currentArgStack</Member>
        <Member type="Field">private CLBufferInfo _currentBuffer</Member>
        <Member type="Field">private readonly Stack&lt;InterpreterState&gt; _jumpStack = new Stack&lt;InterpreterState&gt;()</Member>
        <Member type="Field">private int _width</Member>
        <Member type="Field">private int _height</Member>
        <Member type="Field">private int _depth</Member>
        <Member type="Field">private int _channelCount</Member>
        <Member type="Field">private byte[] _activeChannels</Member>
        <Member type="Field">private MemoryBuffer _activeChannelBuffer</Member>
        <Member type="Field">private bool _leaveStack</Member>
        <Member type="Field">private bool _ignoreDebug</Member>
        <Member type="Field">private InterpreterStepResult _stepResult</Member>
        <Member type="Field">int newField</Member>
        <Member type="Property">public bool Terminated { get; private set; }</Member>
        <Member type="Method">private void Reset()</Member>
        <Member type="Method">public void Reset(string file, MemoryBuffer input, int width, int height, int depth, int channelCount, KernelDatabase kernelDB)</Member>
        <Member type="Method">public void ReleaseResources()</Member>
        <Member type="Method">public void Reset(string file, MemoryBuffer input, int width, int height, int depth, int channelCount, KernelDatabase kernelDB, bool ignoreDebug)</Member>
        <Member type="Method">private static string SanitizeLine(string line)</Member>
        <Member type="Method">private static string[] SplitLine(string line)</Member>
        <Member type="Method">private static bool IsSurroundedBy(string text, string surrStr)</Member>
        <Member type="Method">private void Execute()</Member>
        <Member type="Method">private LineAnalysisResult AnalyzeLine(FLInstructionData data)</Member>
        <Member type="Method">private void DetectEnd()</Member>
        <Member type="Method">private void JumpTo(int index, bool leaveBuffer = false)</Member>
        <Member type="Method">private static Dictionary&lt;string, int&gt; ParseJumpLocations(List&lt;string&gt; source)</Member>
        <Member type="Method">private static void ParseDefines(string key, DefineHandler handler, List&lt;string&gt; source, Dictionary&lt;string, CLBufferInfo&gt; defines, int width, int height, int depth, int channelCount, KernelDatabase kernelDb)</Member>
        <Member type="Method">private static List&lt;string&gt; LoadSource(string file, int channelCount)</Member>
        <Member type="Method">private static FLScriptData LoadScriptData(string file, CLBufferInfo inBuffer, int width, int height, int depth, int channelCount, KernelDatabase db, Dictionary&lt;string, FLFunctionInfo&gt; funcs)</Member>
        <Member type="Method">private static FLInstructionData GetInstructionData(string line, Dictionary&lt;string, CLBufferInfo&gt; defines, Dictionary&lt;string, int&gt; jumpLocations, Dictionary&lt;string, FLFunctionInfo&gt; funcs, KernelDatabase db)</Member>
        <Member type="Method">public MemoryBuffer GetActiveBuffer()</Member>
        <Member type="Method">public CLBufferInfo GetBuffer(string name)</Member>
        <Member type="Method">internal CLBufferInfo GetActiveBufferInternal()</Member>
        <Member type="Method">public T[] GetResult&lt;T&gt;()</Member>
        <Member type="Method">public InterpreterStepResult Step()</Member>
        <Member type="Property">private int EntryIndex { get; }</Member>
        <Member type="Property">private int InputBufferSize { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>RendererContext</Name>
        <Access>Public</Access>
        <Location left="1912" top="2540" />
        <Size width="436" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">protected RendererContext(ShaderProgram program, Matrix4 modelMatrix, bool worldSpace, Renderer.RenderType renderType, int renderQueue)</Member>
        <Member type="Method">public abstract void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Method">public int CompareTo(RenderContext other)</Member>
        <Member type="Method">private int CmpTo(RenderContext other)</Member>
        <Member type="Property">public ShaderProgram Program { get; set; }</Member>
        <Member type="Property">public int RenderQueue { get; set; }</Member>
        <Member type="Property">public Matrix4 ModelMat { get; set; }</Member>
        <Member type="Property">public Matrix4 MV { get; private set; }</Member>
        <Member type="Property">public Vector3 MVPosition { get; private set; }</Member>
        <Member type="Property">public Renderer.RenderType RenderType { get; set; }</Member>
        <Member type="Property">public bool WorldSpace { get; set; }</Member>
        <Member type="Method">public void PrecalculateMV(Matrix4 view)</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>ShaderProgram</Name>
        <Access>Public</Access>
        <Location left="1331" top="2912" />
        <Size width="162" height="366" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private Dictionary&lt;string, int&gt; uniformCache = new Dictionary&lt;string, int&gt;()</Member>
        <Member type="Field">private static ShaderProgram _defaultShader</Member>
        <Member type="Field">private static int _lastUsedPrgID = -1</Member>
        <Member type="Field">private readonly int _prgId</Member>
        <Member type="Constructor">public ShaderProgram()</Member>
        <Member type="Method">public static bool TryCreate(Dictionary&lt;ShaderType, string&gt; subshaders, out ShaderProgram program)</Member>
        <Member type="Method">public void Dispose()</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Member type="Method">public void Use()</Member>
        <Member type="Method">public int GetAttribLocation(string name)</Member>
        <Member type="Method">public void AddUniformCache(string name)</Member>
        <Member type="Method">public int GetUniformLocation(string name)</Member>
        <Member type="Method">public int GetUniformLocationUncached(string name)</Member>
        <Member type="Method">private static bool TryCompileShader(ShaderType type, string source, out int shaderID)</Member>
        <Member type="Property">public static ShaderProgram DefaultShader { get; }</Member>
        <Member type="Method">private static ShaderProgram GetDefaultShader()</Member>
        <Member type="Method">internal static bool TryCreateFromSource(Dictionary&lt;ShaderType, string&gt; subshaders, out ShaderProgram program)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Renderer</Name>
        <Access>Public</Access>
        <Location left="1666" top="2540" />
        <Size width="162" height="315" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly List&lt;RenderTarget&gt; Targets = new List&lt;RenderTarget&gt;()</Member>
        <Member type="Field">internal static List&lt;LightComponent&gt; Lights = new List&lt;LightComponent&gt;()</Member>
        <Member type="Field">private Color _clearColor = new Color(0, 0, 0, 0)</Member>
        <Member type="Field">private RenderTarget rt</Member>
        <Member type="Field">private RenderTarget rt1</Member>
        <Member type="Constructor">internal Renderer()</Member>
        <Member type="Method">public void AddRenderTarget(RenderTarget target)</Member>
        <Member type="Method">public void RemoveRenderTarget(RenderTarget target)</Member>
        <Member type="Method">private static List&lt;RenderContext&gt; CreateRenderQueue(int renderTarget, Matrix4 view, RenderType type)</Member>
        <Member type="Method">public void RenderAllTargets(AbstractScene scene)</Member>
        <Member type="Method">public static void Render(List&lt;RenderContext&gt; contexts, Matrix4 viewM, ICamera cam)</Member>
        <Member type="Method">public void NewMethod()</Member>
        <Member type="Property">private int CurrentTarget { get; set; }</Member>
        <Member type="Property">public Color ClearColor { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>IRendererComponent</Name>
        <Access>Public</Access>
        <Location left="1318" top="2773" />
        <Size width="197" height="111" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public RenderContext Context { get; }</Member>
        <Member type="Property">public int RenderMask { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>MeshRendererContext</Name>
        <Access>Public</Access>
        <Location left="1875" top="3008" />
        <Size width="162" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Field">protected bool _init = false</Member>
        <Member type="Method">public override void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Property">public Mesh[] Meshes { get; set; }</Member>
        <Member type="Property">public Texture[] Textures { get; set; }</Member>
        <Member type="Property">public Vector2 Tiling { get; set; }</Member>
        <Member type="Property">public Vector2 Offset { get; set; }</Member>
        <Member type="Constructor">public MeshRendererContext(ShaderProgram program, Matrix4 modelMatrix, Mesh[] meshes, Texture[] textures, Renderer.RenderType renderType, Vector2 offset, Vector2 tiling)</Member>
        <Member type="Method">private void Init()</Member>
        <Member type="Method">protected void RenderMeshes()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>ICamera</Name>
        <Access>Public</Access>
        <Location left="1318" top="2606" />
        <Size width="209" height="118" />
        <Collapsed>False</Collapsed>
        <Member type="Property">Matrix4 Projection { get; }</Member>
        <Member type="Property">Matrix4 ViewMatrix { get; }</Member>
        <Member type="Method">Matrix4 GetWorldTransform()</Member>
      </Entity>
      <Entity type="Class">
        <Name>RenderTarget</Name>
        <Access>Public</Access>
        <Location left="1655" top="2940" />
        <Size width="162" height="400" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public RenderTargetMergeType MergeType { get; set; }</Member>
        <Member type="Property">public int PassMask { get; set; }</Member>
        <Member type="Property">public Color ClearColor { get; set; }</Member>
        <Member type="Property">public int FrameBuffer { get; }</Member>
        <Member type="Property">public int RenderedTexture { get; }</Member>
        <Member type="Property">public int DepthBuffer { get; }</Member>
        <Member type="Property">internal ICamera PassCamera { get; }</Member>
        <Member type="Property">public Rectangle ViewPort { get; set; }</Member>
        <Member type="Constructor">public RenderTarget(ICamera cam, int PassMask, Color ClearColor, bool noDepth = false)</Member>
        <Member type="Method">public void Dispose()</Member>
        <Member type="Method">public int CompareTo(RenderTarget other)</Member>
        <Member type="Method">public override int GetHashCode()</Member>
        <Member type="Method">public override bool Equals(object obj)</Member>
        <Member type="Method">public static bool operator ==(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator &gt;(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator &lt;(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator &gt;=(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator &lt;=(RenderTarget left, RenderTarget right)</Member>
        <Member type="Method">public static bool operator !=(RenderTarget left, RenderTarget right)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>UIRendererContext</Name>
        <Access>Public</Access>
        <Location left="2596" top="2301" />
        <Size width="436" height="145" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Vector2 Scale { get; set; }</Member>
        <Member type="Property">public Vector2 Position { get; set; }</Member>
        <Member type="Property">public float Alpha { get; set; }</Member>
        <Member type="Constructor">protected UIRendererContext(Vector2 position, Vector2 scale, Matrix4 modelMatrix, bool worldSpace, float alpha, ShaderProgram program, int renderQueue)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>UIImageRenderContext</Name>
        <Access>Public</Access>
        <Location left="2580" top="2536" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private static float[] _screenQuadVertexData</Member>
        <Member type="Field">private bool _init</Member>
        <Member type="Field">private int _vao</Member>
        <Member type="Constructor">public UIImageRenderContext(Vector2 position, Vector2 scale, Matrix4 modelMatrix, Texture tex, bool worldSpace, float alpha, ShaderProgram program, int renderQueue)</Member>
        <Member type="Method">private void SetUpGLBuffers()</Member>
        <Member type="Method">public override void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Property">public Texture Texture { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextRendererContext</Name>
        <Access>Public</Access>
        <Location left="2834" top="2536" />
        <Size width="162" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Field">protected static int _vao</Member>
        <Member type="Field">protected static int _vbo</Member>
        <Member type="Field">protected static bool _init</Member>
        <Member type="Field">private bool cached</Member>
        <Member type="Field">private static float TabToSpaceCount = 0.1f</Member>
        <Member type="Constructor">public TextRendererContext(ShaderProgram program, Vector2 position, Vector2 scale, Matrix4 modelMatrix, bool worldSpace, float alpha, GameFont fontFace, string displayText, int renderQueue)</Member>
        <Member type="Method">private static void SetUpTextResources()</Member>
        <Member type="Method">public override void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Property">public string DisplayText { get; set; }</Member>
        <Member type="Property">public GameFont FontFace { get; set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>FontLibrary</Name>
        <Access>Public</Access>
        <Location left="2390" top="2540" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private readonly Dictionary&lt;string, Tuple&lt;string, GameFont&gt;&gt; _fonts</Member>
        <Member type="Method">public void LoadFont(string filename)</Member>
        <Member type="Constructor">public FontLibrary(string folderPath)</Member>
        <Member type="Method">public void LoadFont(string filename, int pixelSize)</Member>
        <Member type="Method">internal static GameFont LoadFontInternal(Stream fileStream, int pixelSize, out string fontName)</Member>
        <Member type="Method">private void LoadFont(Stream fileStream, int pixelSize, string path)</Member>
        <Member type="Method">public GameFont GetFont(string name)</Member>
        <Member type="Method">public GameFont GetFontByPath(string path)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>RendererContext_From_Engine_Rendering</Name>
        <Access>Public</Access>
        <Location left="2596" top="1960" />
        <Size width="436" height="281" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">protected RendererContext_From_Engine_Rendering(ShaderProgram program, Matrix4 modelMatrix, bool worldSpace, Renderer.RenderType renderType, int renderQueue)</Member>
        <Member type="Method">public abstract void Render(Matrix4 viewMat, Matrix4 projMat)</Member>
        <Member type="Method">public int CompareTo(RenderContext other)</Member>
        <Member type="Method">private int CmpTo(RenderContext other)</Member>
        <Member type="Property">public ShaderProgram Program { get; set; }</Member>
        <Member type="Property">public int RenderQueue { get; set; }</Member>
        <Member type="Property">public Matrix4 ModelMat { get; set; }</Member>
        <Member type="Property">public Matrix4 MV { get; private set; }</Member>
        <Member type="Property">public Vector3 MVPosition { get; private set; }</Member>
        <Member type="Property">public Renderer.RenderType RenderType { get; set; }</Member>
        <Member type="Property">public bool WorldSpace { get; set; }</Member>
        <Member type="Method">public void PrecalculateMV(Matrix4 view)</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Association" first="8" second="7">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>259</X>
          <Y>533</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartMultiplicity>*</StartMultiplicity>
        <EndMultiplicity>1</EndMultiplicity>
      </Relationship>
      <Relationship type="Generalization" first="3" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>776</X>
          <Y>310</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>776</X>
          <Y>265</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="4" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>599</X>
          <Y>310</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>599</X>
          <Y>262</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="5" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>938</X>
          <Y>310</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>938</X>
          <Y>269</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="16" second="11">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="17" second="10">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="10" second="11">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="21" second="18">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Generalization" first="31" second="30">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="29" second="30">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="34" second="29">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="33" second="29">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="36" second="35">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="38" second="37">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="40" second="41">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="42" second="40">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>2548</X>
          <Y>1049</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="43" second="40">
        <Label>Containns</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>2801</X>
          <Y>1042</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="48" second="49">
        <Label>Contains</Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="51" second="50">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="52" second="49">
        <Label>Contains</Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>894</X>
          <Y>3137</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>894</X>
          <Y>3162</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="52" second="51">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>1..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="56" second="60">
        <Label>Contains</Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Generalization" first="58" second="54">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="63" second="61">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="62" second="61">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="61" second="65">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
</Project>